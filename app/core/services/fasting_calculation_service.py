from datetime import date, timedelta
from typing import Dict, List, Optional
from ..config import config
import logging

logger = logging.getLogger(__name__)

class FastingCalculationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    
    # def calculate_fasts_from_age(self, birth_date: date, fast_start_date: date,
    #                              gender: str = 'male',
    #                              hayd_average_days: float = None,
    #                              childbirth_data: List[Dict] = None) -> Dict[str, int]:
    #     """–†–∞—Å—á–µ—Ç –ø–æ—Å—Ç–æ–≤ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è –¥–æ –Ω–∞—á–∞–ª–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤"""
    #     adult_age = config.ADULT_AGE_FEMALE if gender == 'female' else config.ADULT_AGE_MALE
    #     adult_date = birth_date.replace(year=birth_date.year + adult_age)
        
    #     return self.calculate_fasts_between_dates(
    #         adult_date, fast_start_date, gender, 
    #         hayd_average_days, childbirth_data
    #     )
    
    def calculate_fasts_between_dates(self, start_date: date, end_date: date,
                                      gender: str = 'male',
                                      hayd_average_days: float = None,
                                      childbirth_data: List[Dict] = None) -> Dict[str, int]:
        """–†–∞—Å—á–µ—Ç –ø–æ—Å—Ç–æ–≤ –º–µ–∂–¥—É –¥–≤—É–º—è –¥–∞—Ç–∞–º–∏"""
        if start_date >= end_date:
            return {'total_days': 0, 'excluded_days': 0, 'fasting_days': 0, 'details': ''}
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç
        years_diff = end_date.year - start_date.year
        if end_date.month < start_date.month or (end_date.month == start_date.month and end_date.day < start_date.day):
            years_diff -= 1
        
        # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ—Å—Ç–æ–≤ –≤ –≥–æ–¥—É (30 –¥–Ω–µ–π –†–∞–º–∞–¥–∞–Ω–∞)
        base_fast_days = years_diff * 30
        
        # –î–ª—è –∂–µ–Ω—â–∏–Ω –≤—ã—á–∏—Ç–∞–µ–º –¥–Ω–∏ —Ö–∞–π–¥–∞ –∏ –Ω–∏—Ñ–∞—Å–∞
        excluded_days = 0
        details = ""
        
        if False and gender == 'female':
            excluded_days = self._calculate_excluded_fast_days_for_women(
                start_date, end_date, hayd_average_days, childbirth_data
            )
            details = self._generate_calculation_details(
                start_date, end_date, hayd_average_days, childbirth_data, excluded_days
            )
        
        final_fast_days = max(0, base_fast_days - excluded_days)
        
        return {
            'total_days': base_fast_days,
            'excluded_days': excluded_days,
            'fasting_days': final_fast_days,
            'details': details,
            'years': years_diff
        }
        
    def calculate_fasts_by_years(self, years: int) -> Dict[str, int]:
        """–†–∞—Å—á–µ—Ç –ø–æ—Å—Ç–æ–≤ –∑–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç"""
        if years <= 0:
            return {'total_days': 0, 'excluded_days': 0, 'fasting_days': 0, 'details': ''}
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ—Å—Ç–æ–≤ –≤ –≥–æ–¥
        base_fast_days = years * 30
        
        # –î–ª—è –∂–µ–Ω—â–∏–Ω –≤—ã—á–∏—Ç–∞–µ–º –¥–Ω–∏ —Ö–∞–π–¥–∞ –∏ –Ω–∏—Ñ–∞—Å–∞
        excluded_days = 0
        details = ""
        
        return {
            'total_days': base_fast_days,
            'excluded_days': excluded_days,
            'fasting_days': base_fast_days - excluded_days,
            'details': details,
            'years': years
        }
    
    def _calculate_excluded_fast_days_for_women(self, start_date: date, end_date: date,
                                                hayd_average_days: float = None,
                                                childbirth_data: List[Dict] = None) -> int:
        """–†–∞—Å—á–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π –¥–ª—è –∂–µ–Ω—â–∏–Ω (—Ö–∞–π–¥ + –Ω–∏—Ñ–∞—Å)"""
        if not hayd_average_days:
            hayd_average_days = 0
        
        # –ü–∞—Ä—Å–∏–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ–¥–∞—Ö
        births = []
        if childbirth_data:
            for birth in childbirth_data:
                try:
                    birth_date = date.fromisoformat(birth['date'])
                    if start_date <= birth_date <= end_date:
                        births.append({
                            'date': birth_date,
                            'nifas_days': min(birth.get('nifas_days', 0), config.NIFAS_MAX_DAYS),
                            'hayd_before': birth.get('hayd_before', hayd_average_days)
                        })
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–æ–¥–∞—Ö: {e}")
                    continue
        
        births.sort(key=lambda x: x['date'])
        
        total_excluded_days = 0
        current_start = start_date
        
        for i, birth in enumerate(births):
            birth_date = birth['date']
            
            # 1. –ü–µ—Ä–∏–æ–¥ –¥–æ —Ä–æ–¥–æ–≤
            if current_start < birth_date:
                years_before = self._calculate_years_between_dates(current_start, birth_date)
                hayd_days_before = years_before * birth['hayd_before']
                total_excluded_days += hayd_days_before
                
                logger.info(f"–î–æ —Ä–æ–¥–æ–≤ {i+1}: {years_before:.1f} –ª–µ—Ç * {birth['hayd_before']} –¥–Ω–µ–π —Ö–∞–π–¥–∞ = {hayd_days_before:.1f} –¥–Ω–µ–π")
            
            # 2. –ü–µ—Ä–∏–æ–¥ –Ω–∏—Ñ–∞—Å–∞
            nifas_days_in_ramadan = birth['nifas_days'] * (30 / 365)  # –ü—Ä–æ–ø–æ—Ä—Ü–∏—è –Ω–∏—Ñ–∞—Å–∞ –ø–æ–ø–∞–≤—à–µ–≥–æ –Ω–∞ –†–∞–º–∞–¥–∞–Ω
            total_excluded_days += nifas_days_in_ramadan
            
            logger.info(f"–ù–∏—Ñ–∞—Å –ø–æ—Å–ª–µ —Ä–æ–¥–æ–≤ {i+1}: {birth['nifas_days']} –¥–Ω–µ–π, –≤ –†–∞–º–∞–¥–∞–Ω –ø–æ–ø–∞–ª–æ ~{nifas_days_in_ramadan:.1f} –¥–Ω–µ–π")
            
            # –°–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∏—Ñ–∞—Å–∞
            current_start = birth_date + timedelta(days=birth['nifas_days'])
        
        # 3. –ü–µ—Ä–∏–æ–¥ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–æ–¥–æ–≤ (–∏–ª–∏ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ –µ—Å–ª–∏ —Ä–æ–¥–æ–≤ –Ω–µ –±—ã–ª–æ)
        if current_start < end_date:
            years_after = self._calculate_years_between_dates(current_start, end_date)
            hayd_days_after = years_after * hayd_average_days
            total_excluded_days += hayd_days_after
            
            logger.info(f"–ü–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–æ–¥–æ–≤: {years_after:.1f} –ª–µ—Ç * {hayd_average_days} –¥–Ω–µ–π —Ö–∞–π–¥–∞ = {hayd_days_after:.1f} –¥–Ω–µ–π")
        
        return int(total_excluded_days)
    
    def _calculate_years_between_dates(self, start: date, end: date) -> float:
        """–†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–µ—Ç –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏ (—Å –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç—å—é)"""
        years = end.year - start.year
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –µ—Å–ª–∏ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–Ω—å—à–µ –≤ –≥–æ–¥—É
        if end.month < start.month or (end.month == start.month and end.day < start.day):
            years -= 1
            
        # –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å
        days_diff = (end - start).days
        return days_diff / 365.25
    
    def _generate_calculation_details(self, start_date: date, end_date: date,
                                      hayd_average_days: float,
                                      childbirth_data: List[Dict],
                                      excluded_days: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Ä–∞—Å—á–µ—Ç–µ"""
        details = "üìã **–î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è –∂–µ–Ω—â–∏–Ω:**\n\n"
        
        years_total = self._calculate_years_between_dates(start_date, end_date)
        details += f"üóìÔ∏è –û–±—â–∏–π –ø–µ—Ä–∏–æ–¥: {years_total:.1f} –ª–µ—Ç\n"
        details += f"üåô –¢–µ–∫—É—â–∏–π —Ö–∞–π–¥: {hayd_average_days} –¥–Ω–µ–π/–º–µ—Å—è—Ü\n\n"
        
        if childbirth_data:
            details += "üë∂ **–†–æ–¥—ã –≤ —ç—Ç–æ–º –ø–µ—Ä–∏–æ–¥–µ:**\n"
            births_in_period = []
            
            for birth in childbirth_data:
                try:
                    birth_date = date.fromisoformat(birth['date'])
                    if start_date <= birth_date <= end_date:
                        births_in_period.append(birth)
                        details += f"‚Ä¢ {birth_date.strftime('%d.%m.%Y')}: –Ω–∏—Ñ–∞—Å {birth['nifas_days']} –¥–Ω–µ–π, —Ö–∞–π–¥ –¥–æ —Ä–æ–¥–æ–≤ {birth['hayd_before']} –¥–Ω–µ–π\n"
                except:
                    continue
            
            if not births_in_period:
                details += "‚Ä¢ –†–æ–¥–æ–≤ –≤ —ç—Ç–æ–º –ø–µ—Ä–∏–æ–¥–µ –Ω–µ –±—ã–ª–æ\n"
            
            details += "\n"
        
        details += f"‚ùå **–ò—Å–∫–ª—é—á–µ–Ω–æ –¥–Ω–µ–π:** {excluded_days}\n"
        details += "üí° **–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞—Å—á–µ—Ç–∞:** –∏–∑ 30 –¥–Ω–µ–π –ø–æ—Å—Ç–∞ –≤ –≥–æ–¥ –≤—ã—á–∏—Ç–∞—é—Ç—Å—è –¥–Ω–∏ —Ö–∞–π–¥–∞ –∏ –Ω–∏—Ñ–∞—Å–∞, –ø–æ–ø–∞–¥–∞—é—â–∏–µ –Ω–∞ –†–∞–º–∞–¥–∞–Ω"
        
        return details