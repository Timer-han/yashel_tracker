from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
from app import __version__

from ...keyboards.user.settings import (
    get_settings_menu_keyboard, 
    get_change_confirmation_keyboard,
    get_notifications_confirmation_keyboard
)
from ...keyboards.user.registration import get_gender_keyboard, get_gender_inline_keyboard
from ....core.config import escape_markdown
from ....core.services.user_service import UserService
from ....core.services.prayer_service import PrayerService
from ...states.settings import SettingsStates
from ...utils.text_messages import text_message


router = Router()
user_service = UserService()
prayer_service = PrayerService()

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings(message: Message):
    """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user = await user_service.get_or_create_user(message.from_user.id)
    
    display_name = escape_markdown(user.display_name)
    birth_date = escape_markdown(user.birth_date.strftime('%d.%m.%Y') if user.birth_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    city = escape_markdown(user.city or '–ù–µ —É–∫–∞–∑–∞–Ω')
    gender = '–ú—É–∂—Å–∫–æ–π' if user.gender == 'male' else '–ñ–µ–Ω—Å–∫–∏–π' if user.gender == 'female' else '–ù–µ —É–∫–∞–∑–∞–Ω'
    notifications = '–í–∫–ª—é—á–µ–Ω—ã' if user.notifications_enabled else '–û—Ç–∫–ª—é—á–µ–Ω—ã'
    settings_text = text_message.SETTINGS_TEXT.format(
        display_name=display_name,
        birth_date=birth_date,
        city=city,
        gender=gender,
        notifications=notifications
    )
    
    await message.answer(
        settings_text,
        reply_markup=get_settings_menu_keyboard(user.notifications_enabled),
        parse_mode="MarkdownV2"
    )

@router.callback_query(F.data == "change_gender")
async def change_gender(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–∞"""
    await callback.message.edit_text(
        "üë§ –í—ã–±–µ—Ä–∏ –≤–∞—à –ø–æ–ª:",
        reply_markup=get_gender_inline_keyboard()
    )
    await state.set_state(SettingsStates.waiting_for_gender)

@router.callback_query(F.data.startswith("set_gender_"))
async def process_gender_change(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–∞"""
    gender = callback.data.split("_")[2]  # male –∏–ª–∏ female
    
    success = await user_service.user_repo.update_user(
        telegram_id=callback.from_user.id,
        gender=gender
    )
    
    if success:
        gender_text = "–º—É–∂—Å–∫–æ–π" if gender == "male" else "–∂–µ–Ω—Å–∫–∏–π"
        await callback.message.edit_text(f"‚úÖ –ü–æ–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {gender_text}!")
    else:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–∞.")
    
    await state.clear()

@router.callback_query(F.data == "change_birth_date")
async def change_birth_date(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    await callback.message.edit_text(
        "üìÖ –í–≤–µ–¥–∏ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990"
    )
    await state.set_state(SettingsStates.waiting_for_birth_date)

@router.message(SettingsStates.waiting_for_birth_date)
async def process_new_birth_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    try:
        birth_date = datetime.strptime(message.text, "%d.%m.%Y").date()
        
        success = await user_service.user_repo.update_user(
            telegram_id=message.from_user.id,
            birth_date=birth_date
        )
        
        if success:
            await message.answer("‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è.")
    
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990"
        )
        return
    
    await state.clear()

@router.callback_query(F.data == "change_city")
async def change_city(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞"""
    await callback.message.edit_text("üèôÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:")
    await state.set_state(SettingsStates.waiting_for_city)

@router.message(SettingsStates.waiting_for_city)
async def process_new_city(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    new_city = message.text.strip()
    
    success = await user_service.user_repo.update_user(
        telegram_id=message.from_user.id,
        city=new_city
    )
    
    if success:
        await message.answer("‚úÖ –ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞.")
    
    await state.clear()

@router.callback_query(F.data == "disable_notifications")
async def disable_notifications(callback: CallbackQuery):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    await callback.message.edit_text(
        "üîï *–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n"
        "–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ –Ω–∞–º–∞–∑–æ–≤\?\n\n"
        "‚ö†Ô∏è –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –ø–æ\-–ø—Ä–µ–∂–Ω–µ–º—É\.",
        reply_markup=get_notifications_confirmation_keyboard(),
        parse_mode="MarkdownV2"
    )
    await callback.answer()

@router.callback_query(F.data == "enable_notifications")
async def enable_notifications(callback: CallbackQuery):
    """–í–∫–ª—é—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    await callback.message.edit_text(
        "üîî *–í–∫–ª—é—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n"
        "–•–æ—á–µ—à—å –≤–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ –Ω–∞–º–∞–∑–æ–≤\?\n\n"
        "üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 20:00\.",
        reply_markup=get_notifications_confirmation_keyboard(),
        parse_mode="MarkdownV2"
    )
    await callback.answer()

@router.callback_query(F.data == "confirm_notifications_change")
async def confirm_notifications_change(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user = await user_service.get_or_create_user(callback.from_user.id)
    
    # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    new_state = 0 if user.notifications_enabled else 1
    
    success = await user_service.user_repo.update_user(
        telegram_id=callback.from_user.id,
        daily_notifications_enabled=new_state
    )
    
    if success:
        if new_state == 1:
            text = (
                "‚úÖ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã\!*\n\n"
                "üîî –¢—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–æ–ª–≥–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 20:00\.\n\n"
                "ü§≤ –ü—É—Å—Ç—å –ê–ª–ª–∞—Ö –æ–±–ª–µ–≥—á–∏—Ç —Ç–µ–±–µ –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–º–∞–∑–æ–≤ –∏ –ø–æ—Å—Ç–æ–≤\!"
            )
        else:
            text = (
                "‚úÖ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã\!*\n\n"
                "üîï –¢—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\.\n\n"
                "üí° –û–±—Ä–∞—Ç–Ω–æ —Å–º–æ–∂–µ—à—å –≤–∫–ª—é—á–∏—Ç—å –∏—Ö –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\."
            )
        
        await callback.message.edit_text(text, parse_mode="MarkdownV2")
    else:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\.")

@router.callback_query(F.data == "cancel_notifications_change")
async def cancel_notifications_change(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user = await user_service.get_or_create_user(callback.from_user.id)

    
    display_name = escape_markdown(user.display_name)
    birth_date = escape_markdown(user.birth_date.strftime('%d.%m.%Y') if user.birth_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    city = escape_markdown(user.city or '–ù–µ —É–∫–∞–∑–∞–Ω')
    gender = '–ú—É–∂—Å–∫–æ–π' if user.gender == 'male' else '–ñ–µ–Ω—Å–∫–∏–π' if user.gender == 'female' else '–ù–µ —É–∫–∞–∑–∞–Ω'
    notifications = '–í–∫–ª—é—á–µ–Ω—ã' if user.notifications_enabled else '–û—Ç–∫–ª—é—á–µ–Ω—ã'
    
    settings_text = text_message.SETTINGS_TEXT.format(
        display_name=display_name,
        birth_date=birth_date,
        city=city,
        gender=gender,
        notifications=notifications
    )
    
    await callback.message.edit_text(
        settings_text,
        reply_markup=get_settings_menu_keyboard(user.notifications_enabled),
        parse_mode="MarkdownV2"
    )

@router.callback_query(F.data == "export_data")
async def export_data(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    user = await user_service.get_or_create_user(callback.from_user.id)
    stats = await prayer_service.get_user_statistics(callback.from_user.id)
    
    telegram_id = user.telegram_id
    display_name = escape_markdown(user.display_name)
    gender = escape_markdown('–ú—É–∂—Å–∫–æ–π' if user.gender == 'male' else '–ñ–µ–Ω—Å–∫–∏–π' if user.gender == 'female' else '–ù–µ —É–∫–∞–∑–∞–Ω')
    birth_date = escape_markdown(user.birth_date.strftime('%d.%m.%Y') if user.birth_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    city = escape_markdown(user.city or '–ù–µ —É–∫–∞–∑–∞–Ω')
    role = escape_markdown(user.role)
    created_at = escape_markdown(user.created_at.strftime('%d.%m.%Y %H:%M') if hasattr(user, 'created_at') and user.created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    notifications_enabled = escape_markdown('–í–∫–ª—é—á–µ–Ω—ã' if user.notifications_enabled else '–û—Ç–∫–ª—é—á–µ–Ω—ã')
    

        
    export_text = (
        f"üìä *–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
        f"*üë§ –ü—Ä–æ—Ñ–∏–ª—å:*\n"
        f"‚Ä¢ Telegram ID: `{telegram_id}`\n"
        f"‚Ä¢ –ò–º—è: {display_name}\n"
        f"‚Ä¢ –ü–æ–ª: {gender}\n"
        f"‚Ä¢ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date}\n"
        f"‚Ä¢ –ì–æ—Ä–æ–¥: {city}\n"
        f"‚Ä¢ –†–æ–ª—å: {role}\n"
        f"‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {created_at}\n"
        f"‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notifications_enabled}\n\n"
    )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–º–∞–∑–æ–≤
    export_text += (
        f"*üïå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–º–∞–∑–æ–≤:*\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ: {stats['total_missed']}\n"
        f"‚Ä¢ –í–æ—Å–ø–æ–ª–Ω–µ–Ω–æ: {stats['total_completed']}\n"
        f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {stats['total_remaining']}\n"
    )
    
    if stats['total_missed'] > 0:
        progress = (stats['total_completed'] / stats['total_missed']) * 100
        export_text += escape_markdown(f"‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {progress:.1f}%\n")
    
    export_text += "\n*üìã –î–µ—Ç–∞–ª–∏ –ø–æ –Ω–∞–º–∞–∑–∞–º:*\n"
    for prayer_name, data in stats['prayers'].items():
        if data['total'] > 0:
            prayer_progress = (data['completed'] / data['total']) * 100 if data['total'] > 0 else 0
            export_text += escape_markdown(f"‚Ä¢ {prayer_name}: {data['completed']}/{data['total']} ({prayer_progress:.1f}%)\n")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤
    missed_fasts = user.fasting_missed_days or 0
    completed_fasts = user.fasting_completed_days or 0
    remaining_fasts = max(0, missed_fasts - completed_fasts)
    
    export_text += (
        f"\n*üìø –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤:*\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ –¥–Ω–µ–π: {missed_fasts}\n"
        f"‚Ä¢ –í–æ—Å–ø–æ–ª–Ω–µ–Ω–æ –¥–Ω–µ–π: {completed_fasts}\n"
        f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {remaining_fasts}\n"
    )
    
    if missed_fasts > 0:
        fast_progress = (completed_fasts / missed_fasts) * 100
        export_text += escape_markdown(f"‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {fast_progress:.1f}%\n")
    
    # # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∂–µ–Ω—â–∏–Ω
    # if False:
    #     if user.gender == 'female':
    #         export_text += f"\n*üë© –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∂–µ–Ω—â–∏–Ω:*\n"
            
    #         if user.hayd_average_days:
    #             export_text += f"‚Ä¢ –¢–µ–∫—É—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞: {user.hayd_average_days} –¥–Ω–µ–π\n"
    #         else:
    #             export_text += f"‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞\n"
            
    #         export_text += f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–¥–æ–≤: {user.childbirth_count or 0}\n"
            
    #         # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–¥–∞—Ö
    #         if user.childbirth_count and user.childbirth_count > 0:
    #             childbirth_info = user.get_childbirth_info()
    #             if childbirth_info:
    #                 export_text += f"\n*üë∂ –î–µ—Ç–∞–ª–∏ —Ä–æ–¥–æ–≤:*\n"
    #                 for i, birth in enumerate(childbirth_info, 1):
    #                     birth_date = birth.get('date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    #                     nifas_days = birth.get('nifas_days', 0)
    #                     hayd_before = birth.get('hayd_before', 0)
                        
    #                     export_text += (
    #                         f"‚Ä¢ {i}-–µ —Ä–æ–¥—ã:\n"
    #                         f"  - –î–∞—Ç–∞: {birth_date}\n"
    #                         f"  - –ù–∏—Ñ–∞—Å: {nifas_days} –¥–Ω–µ–π\n"
    #                         f"  - –•–∞–π–¥ –¥–æ —Ä–æ–¥–æ–≤: {hayd_before} –¥–Ω–µ–π\n"
    #                     )
            
    #         # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –¥–ª—è –∂–µ–Ω—â–∏–Ω
    #         if user.birth_date and user.hayd_average_days:
    #             from ....core.services.calculation_service import CalculationService
    #             calc_service = CalculationService()
    #             age = calc_service.calculate_age(user.birth_date)
                
    #             # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –∑–∞ —Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    #             reproductive_years = max(0, age - 9)  # —Å 9 –ª–µ—Ç (—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏–µ –¥–ª—è –¥–µ–≤–æ—á–µ–∫)
    #             approximate_cycles = reproductive_years * 12  # –ø—Ä–∏–º–µ—Ä–Ω–æ 12 —Ü–∏–∫–ª–æ–≤ –≤ –≥–æ–¥
                
    #             export_text += (
    #                 f"\n*üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã:*\n"
    #                 f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n"
    #                 f"‚Ä¢ –†–µ–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥: ~{reproductive_years} –ª–µ—Ç\n"
    #                 f"‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤: ~{approximate_cycles}\n"
    #             )

    adult_date = escape_markdown(user.adult_date.strftime('%d.%m.%Y') if user.adult_date else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
    prayer_start_date = escape_markdown(user.prayer_start_date.strftime('%d.%m.%Y') if user.prayer_start_date else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
    last_activity = escape_markdown(user.last_activity.strftime('%d.%m.%Y %H:%M') if hasattr(user, 'last_activity') and user.last_activity else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    is_registered = escape_markdown('–ó–∞–≤–µ—Ä—à–µ–Ω–∞' if user.is_registered else '–ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
    export_date = escape_markdown((datetime.now() + timedelta(hours=3)).strftime('%d.%m.%Y %H:%M:%S'))
    version = escape_markdown(__version__)

    # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    export_text += (
        f"\n*‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n"
        # f"‚Ä¢ –î–∞—Ç–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è: {adult_date}\n"
        f"‚Ä¢ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–∞–º–∞–∑–æ–≤: {prayer_start_date}\n" if user.gender == 'male' else f""
        f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}\n"
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {is_registered}\n"
    )
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫—Å–ø–æ—Ä—Ç–µ
    export_text += (
        f"\n*üì§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫—Å–ø–æ—Ä—Ç–µ:*\n"
        f"‚Ä¢ –î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {export_date}\n"
        f"‚Ä¢ –í–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã: –Ø—à–µ–ª –¢—Ä–µ–∫–µ—Ä v{version}\n"
        f"‚Ä¢ –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç\n"
        f"\nüíæ –°–æ—Ö—Ä–∞–Ω–∏ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ\.\n"
        f"üìã –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\."
    )
    
    await callback.message.edit_text(export_text, parse_mode="MarkdownV2")

@router.callback_query(F.data == "reset_all_data")
async def confirm_reset_all_data(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞"""
    await callback.message.edit_text(
        "üîÑ *–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö*\n\n"
        "‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï\!* –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "‚Ä¢ –£–¥–∞–ª–∏—Ç –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–º–∞–∑–æ–≤\n"
        "‚Ä¢ –°–±—Ä–æ—Å–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n"
        "‚Ä¢ –ü–æ—Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ *–ù–ï–û–ë–†–ê–¢–ò–ú–û*\!\n\n"
        "–¢—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å\?",
        reply_markup=get_change_confirmation_keyboard("reset_all"),
        parse_mode="MarkdownV2"
    )

@router.callback_query(F.data == "confirm_reset_all")
async def reset_all_data_confirmed(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–º–∞–∑—ã
    await prayer_service.reset_user_prayers(callback.from_user.id)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await user_service.user_repo.update_user(
        telegram_id=callback.from_user.id,
        is_registered=False,
        gender=None,
        birth_date=None,
        city=None,
        prayer_start_date=None,
        adult_date=None,
        fasting_missed_days=0,
        fasting_completed_days=0,
        hayd_average_days=None,
        childbirth_count=0,
        childbirth_data=None,
        daily_notifications_enabled=1  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    )
    
    await callback.message.edit_text(
        "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
    )

@router.callback_query(F.data.startswith("cancel_"))
async def cancel_action(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@router.callback_query(F.data == "back_to_settings")
async def back_to_settings(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
    await show_settings(callback.message)