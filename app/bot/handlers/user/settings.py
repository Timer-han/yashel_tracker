from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from datetime import datetime

from ...keyboards.user.settings import get_settings_menu_keyboard, get_change_confirmation_keyboard
from ...keyboards.user.registration import get_gender_keyboard, get_gender_inline_keyboard
from ....core.services.user_service import UserService
from ....core.services.prayer_service import PrayerService
from ...states.settings import SettingsStates

router = Router()
user_service = UserService()
prayer_service = PrayerService()

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings(message: Message):
    """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user = await user_service.get_or_create_user(message.from_user.id)
    
    settings_text = (
        "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è**\n\n"
        # f"üë§ –ò–º—è: {user.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üë§ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if user.gender == 'male' else '–ñ–µ–Ω—Å–∫–∏–π' if user.gender == 'female' else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user.birth_date.strftime('%d.%m.%Y') if user.birth_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {user.city or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    )
    
    await message.answer(
        settings_text,
        reply_markup=get_settings_menu_keyboard(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "change_gender")
async def change_gender(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–∞"""
    await callback.message.edit_text(
        "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        reply_markup=get_gender_inline_keyboard()
    )
    await state.set_state(SettingsStates.waiting_for_gender)

@router.callback_query(F.data == "change_birth_date")
async def change_birth_date(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    await callback.message.edit_text(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990"
    )
    await state.set_state(SettingsStates.waiting_for_birth_date)

@router.message(SettingsStates.waiting_for_birth_date)
async def process_new_birth_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    try:
        birth_date = datetime.strptime(message.text, "%d.%m.%Y").date()
        
        success = await user_service.user_repo.update_user(
            telegram_id=message.from_user.id,
            birth_date=birth_date
        )
        
        if success:
            await message.answer("‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è.")
    
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990"
        )
        return
    
    await state.clear()

@router.callback_query(F.data == "change_city")
async def change_city(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞"""
    await callback.message.edit_text("üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:")
    await state.set_state(SettingsStates.waiting_for_city)

@router.message(SettingsStates.waiting_for_city)
async def process_new_city(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    new_city = message.text.strip()
    
    success = await user_service.user_repo.update_user(
        telegram_id=message.from_user.id,
        city=new_city
    )
    
    if success:
        await message.answer("‚úÖ –ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞.")
    
    await state.clear()

@router.callback_query(F.data == "export_data")
async def export_data(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await user_service.get_or_create_user(callback.from_user.id)
    stats = await prayer_service.get_user_statistics(callback.from_user.id)
    
    export_text = (
        f"üìä **–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
        f"**–ü—Ä–æ—Ñ–∏–ª—å:**\n"
        f"‚Ä¢ –ò–º—è: {user.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"‚Ä¢ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if user.gender == 'male' else '–ñ–µ–Ω—Å–∫–∏–π' if user.gender == 'female' else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"‚Ä¢ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user.birth_date.strftime('%d.%m.%Y') if user.birth_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"‚Ä¢ –ì–æ—Ä–æ–¥: {user.city or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y %H:%M') if hasattr(user, 'created_at') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
        f"**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–º–∞–∑–æ–≤:**\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ: {stats['total_missed']}\n"
        f"‚Ä¢ –í–æ—Å–ø–æ–ª–Ω–µ–Ω–æ: {stats['total_completed']}\n"
        f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {stats['total_remaining']}\n\n"
        f"**–î–µ—Ç–∞–ª–∏ –ø–æ –Ω–∞–º–∞–∑–∞–º:**\n"
    )
    
    for prayer_name, data in stats['prayers'].items():
        if data['total'] > 0:
            export_text += f"‚Ä¢ {prayer_name}: {data['completed']}/{data['total']}\n"
    
    await callback.message.edit_text(export_text, parse_mode="Markdown")

@router.callback_query(F.data == "reset_all_data")
async def confirm_reset_all_data(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞"""
    await callback.message.edit_text(
        "üîÑ **–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö**\n\n"
        "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "‚Ä¢ –£–¥–∞–ª–∏—Ç –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–º–∞–∑–æ–≤\n"
        "‚Ä¢ –°–±—Ä–æ—Å–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n"
        "‚Ä¢ –ü–æ—Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ **–ù–ï–û–ë–†–ê–¢–ò–ú–û**!\n\n"
        "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=get_change_confirmation_keyboard("reset_all"),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "confirm_reset_all")
async def reset_all_data_confirmed(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–º–∞–∑—ã
    await prayer_service.reset_user_prayers(callback.from_user.id)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await user_service.user_repo.update_user(
        telegram_id=callback.from_user.id,
        is_registered=False,
        full_name=None,
        gender=None,
        birth_date=None,
        city=None
    )
    
    await callback.message.edit_text(
        "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
    )

@router.callback_query(F.data.startswith("cancel_"))
async def cancel_action(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@router.callback_query(F.data == "back_to_settings")
async def back_to_settings(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
    await show_settings(callback.message)