from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from datetime import date, datetime
import logging

from ...keyboards.user.main_menu import get_main_menu_keyboard
from ...keyboards.user.prayer_calc import (
    get_male_calculation_method_keyboard,
    get_female_calculation_method_keyboard,
    get_yes_no_keyboard,
    get_births_count_keyboard,
    get_miscarriages_count_keyboard,
    get_hayd_duration_keyboard,
    get_nifas_duration_keyboard,
    get_calculation_confirmation_keyboard
)
from ....core.services.calculation_service import CalculationService
from ....core.services.prayer_service import PrayerService
from ....core.services.user_service import UserService
from ....core.config import config, escape_markdown
from ...states.prayer_calculation import PrayerCalculationStates
from ...utils.date_utils import parse_date, format_date

logger = logging.getLogger(__name__)
router = Router()
calculation_service = CalculationService()
prayer_service = PrayerService()
user_service = UserService()

# ======================================
# –ù–ê–ß–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö
# ======================================

@router.message(F.text == "üî¢ –†–∞—Å—á–µ—Ç –Ω–∞–º–∞–∑–æ–≤")
async def start_prayer_calculation(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–º–∞–∑–æ–≤"""
    await state.clear()
    
    user = await user_service.get_or_create_user(message.from_user.id)
    
    if user.gender == 'male':
        await message.answer(
            "üî¢ **–†–∞—Å—á–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–º–∞–∑–æ–≤**\n\n"
            "–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± —Ä–∞—Å—á–µ—Ç–∞:",
            reply_markup=get_male_calculation_method_keyboard(),
            parse_mode="MarkdownV2"
        )
    else:  # female
        await message.answer(
            "üî¢ **–†–∞—Å—á–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–º–∞–∑–æ–≤**\n\n"
            "–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± —Ä–∞—Å—á–µ—Ç–∞:",
            reply_markup=get_female_calculation_method_keyboard(),
            parse_mode="MarkdownV2"
        )
    
    await state.set_state(PrayerCalculationStates.choosing_method)

# ====================================== 
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ú–£–ñ–ß–ò–ù
# ======================================

@router.callback_query(PrayerCalculationStates.choosing_method, F.data == "male_know_maturity")
async def male_know_maturity(callback: CallbackQuery, state: FSMContext):
    """–ú—É–∂—á–∏–Ω–∞ –∑–Ω–∞–µ—Ç –¥–∞—Ç—É —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è"""
    await callback.message.edit_text(
        "üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è –ø–æ –∏—Å–ª–∞–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î\.–ú–ú\.–ì–ì–ì–ì:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 15\.03\.2010",
        parse_mode="MarkdownV2"
    )
    await state.set_state(PrayerCalculationStates.male_maturity_date_input)

@router.message(PrayerCalculationStates.male_maturity_date_input)
async def process_male_maturity_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è –º—É–∂—á–∏–Ω—ã"""
    maturity_date, error = validate_date_input(message.text, max_date=date.today())
    if error:
        await message.answer(error, parse_mode="MarkdownV2")
        return
    
    await state.update_data(maturity_date=maturity_date)
    
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –Ω–∞—á–∞–ª —Ä–µ–≥—É–ª—è—Ä–Ω–æ —Å–æ–≤–µ—Ä—à–∞—Ç—å 6 –Ω–∞–º–∞–∑–æ–≤ –≤ –¥–µ–Ω—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î\.–ú–ú\.–ì–ì–ì–ì:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 01\.09\.2020",
        parse_mode="MarkdownV2"
    )
    await state.set_state(PrayerCalculationStates.male_prayer_start_date_input)

@router.message(PrayerCalculationStates.male_prayer_start_date_input)
async def process_male_prayer_start_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –Ω–∞–º–∞–∑–æ–≤ –º—É–∂—á–∏–Ω—ã"""
    data = await state.get_data()
    maturity_date = data['maturity_date']
    
    prayer_start_date, error = validate_date_input(message.text, min_date=maturity_date, max_date=date.today())
    if error:
        await message.answer(error, parse_mode="MarkdownV2")
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–º–∞–∑—ã
    prayers_data = calculation_service.calculate_male_prayers_simple(maturity_date, prayer_start_date)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await prayer_service.set_user_prayers(message.from_user.id, prayers_data)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_text = calculation_service.format_calculation_summary(
        prayers_data,
        {
            'start_date': format_date(maturity_date),
            'end_date': format_date(prayer_start_date)
        }
    )
    
    await message.answer(escape_markdown(result_text, "()-?.!_="), reply_markup=get_main_menu_keyboard(), parse_mode="MarkdownV2")
    await state.clear()

@router.callback_query(PrayerCalculationStates.choosing_method, F.data == "male_manual")
async def male_manual_input(callback: CallbackQuery, state: FSMContext):
    """–†—É—á–Ω–æ–π –≤–≤–æ–¥ –Ω–∞–º–∞–∑–æ–≤ –¥–ª—è –º—É–∂—á–∏–Ω—ã"""
    await callback.message.edit_text(
        "‚úã **–†—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–º–∞–∑–æ–≤**\n\n"
        "–í–≤–µ–¥–∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 1500",
        parse_mode="MarkdownV2"
    )
    await state.set_state(PrayerCalculationStates.manual_input_count)

@router.callback_query(PrayerCalculationStates.choosing_method, F.data == "male_learn")
async def male_learn_to_calculate(callback: CallbackQuery, state: FSMContext):
    """–û–±—É—á–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç—É –¥–ª—è –º—É–∂—á–∏–Ω—ã"""
    await callback.message.edit_text(
        "üéì **–£—á–∏–º—Å—è —Å—á–∏—Ç–∞—Ç—å –Ω–∞–º–∞–∑—ã —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ**\n\n"
        "–¢—ã –ø–æ–º–Ω–∏—à—å –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è?\n\n"
        "üí° –ï—Å–ª–∏ –Ω–µ –ø–æ–º–Ω–∏—à—å, —Å–ø—Ä–æ—Å–∏ —É —Ä–æ–¥–Ω—ã—Ö, —Ä–∞—Å–∫–æ–ø–∞–π –∞—Ä—Ö–∏–≤—ã, –≤—Å–ø–æ–º–Ω–∏ —Å–æ–±—ã—Ç–∏—è 12\-15\-–ª–µ—Ç–Ω–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞\. "
        "–ï—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–µ –ø–æ–º–Ω–∏—à—å, —Ç–æ –≤–æ–∑—å–º–∏ –∑–∞ –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è 11\.5 –ª–µ—Ç\.",
        reply_markup=get_yes_no_keyboard("male_learn_remember_yes", "male_learn_remember_no"),
        parse_mode="MarkdownV2"
    )
    await state.set_state(PrayerCalculationStates.male_learning_remember_maturity)

@router.callback_query(PrayerCalculationStates.male_learning_remember_maturity, F.data.startswith("male_learn_remember_"))
async def process_male_learn_remember(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ –ø–∞–º—è—Ç–∏ –¥–∞—Ç—ã —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è"""
    remembers = callback.data == "male_learn_remember_yes"
    
    if not remembers:
        user = await user_service.get_or_create_user(callback.from_user.id)
        if user.birth_date:
            estimated_maturity = calculation_service.estimate_maturity_age(user.birth_date, False)
            await state.update_data(maturity_date=estimated_maturity, estimated=True)
            text = f"üìÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—É—é –¥–∞—Ç—É —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è: {format_date(estimated_maturity)}\n\n"
        else:
            await callback.message.edit_text(
                "‚ùå –ù—É–∂–Ω–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏\. –ü—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏ –¥–∞—Ç—É —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è –≤—Ä—É—á–Ω—É—é\.",
                parse_mode="MarkdownV2"
            )
            return
    else:
        text = ""
    
    text += ("–¢—ã –∑–Ω–∞–µ—à—å –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –Ω–∞—á–∞–ª —Å—Ç–∞–±–∏–ª—å–Ω–æ —Å–æ–≤–µ—Ä—à–∞—Ç—å 6 –Ω–∞–º–∞–∑–æ–≤ –≤ –¥–µ–Ω—å?\n\n"
             "üí° –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ, –≤–æ–∑—å–º–∏ –¥–∞—Ç—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ç—ã —É–∂–µ —Ç–æ—á–Ω–æ —á–∏—Ç–∞–ª 6 –Ω–∞–º–∞–∑–æ–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ\.")
    
    await callback.message.edit_text(
        text,
        reply_markup=get_yes_no_keyboard("male_learn_know_start_yes", "male_learn_know_start_no"),
        parse_mode="MarkdownV2"
    )
    await state.set_state(PrayerCalculationStates.male_learning_know_prayer_start)

@router.callback_query(PrayerCalculationStates.male_learning_know_prayer_start, F.data.startswith("male_learn_know_start_"))
async def process_male_learn_prayer_start(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞–Ω–∏—è –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –Ω–∞–º–∞–∑–æ–≤"""
    knows_start = callback.data == "male_learn_know_start_yes"
    await state.update_data(knows_prayer_start=knows_start)
    
    await callback.message.edit_text(
        "ü§î –ë—ã–ª–∏ –ª–∏ –µ—â—ë –ø–µ—Ä–∏–æ–¥—ã, –∫–æ–≥–¥–∞ —Ç—ã –Ω–µ —á–∏—Ç–∞–ª –Ω–∞–º–∞–∑?\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –±–æ–ª–µ–∑–Ω—å, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –∑–∞–±—ã–≤—á–∏–≤–æ—Å—Ç—å –∏ —Ç\.–¥\.",
        reply_markup=get_yes_no_keyboard("male_learn_breaks_yes", "male_learn_breaks_no"),
        parse_mode="MarkdownV2"
    )
    await state.set_state(PrayerCalculationStates.male_learning_had_breaks)

@router.callback_query(PrayerCalculationStates.male_learning_had_breaks, F.data == "male_learn_breaks_yes")
async def male_learn_had_breaks(callback: CallbackQuery, state: FSMContext):
    """–£ –º—É–∂—á–∏–Ω—ã –±—ã–ª–∏ –ø–µ—Ä–µ—Ä—ã–≤—ã –≤ –Ω–∞–º–∞–∑–∞—Ö"""
    await callback.message.edit_text(
        "üìä –ü–æ—Å—á–∏—Ç–∞–π —Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π –∏ –≤–≤–µ–¥–∏ –µ–≥–æ:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 180",
        parse_mode="MarkdownV2"
    )
    await state.set_state(PrayerCalculationStates.male_learning_breaks_days_input)

@router.callback_query(PrayerCalculationStates.male_learning_had_breaks, F.data == "male_learn_breaks_no")
async def male_learn_no_breaks(callback: CallbackQuery, state: FSMContext):
    """–£ –º—É–∂—á–∏–Ω—ã –Ω–µ –±—ã–ª–æ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤"""
    await state.update_data(break_days=0)
    await ask_male_final_input(callback, state)

@router.message(PrayerCalculationStates.male_learning_breaks_days_input)
async def process_male_break_days(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–Ω–µ–π –ø–µ—Ä–µ—Ä—ã–≤–æ–≤"""
    break_days, error = validate_number_input(message.text, min_val=0, integer_only=True)
    if error:
        await message.answer(error, parse_mode="MarkdownV2")
        return
    
    await state.update_data(break_days=break_days)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π callback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    class FakeCallback:
        def __init__(self, message):
            self.message = message
    
    await ask_male_final_input(FakeCallback(message), state, is_message=True)

async def ask_male_final_input(callback_or_message, state: FSMContext, is_message=False):
    """–ó–∞–ø—Ä–æ—Å —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–º–∞–∑–æ–≤"""
    text = ("üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–º–∞–∑–æ–≤:\n\n"
            "üí° –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π √ó 6 –Ω–∞–º–∞–∑–æ–≤ \+ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∏")
    
    if is_message:
        await callback_or_message.message.answer(text, parse_mode="MarkdownV2")
    else:
        await callback_or_message.message.edit_text(text, parse_mode="MarkdownV2")
    
    await state.set_state(PrayerCalculationStates.male_learning_final_count_input)

@router.message(PrayerCalculationStates.male_learning_final_count_input)
async def process_male_final_count(message: Message, state: FSMContext):
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–º–∞–∑–æ–≤ –¥–ª—è –º—É–∂—á–∏–Ω—ã"""
    total_count, error = validate_number_input(message.text, min_val=0, integer_only=True)
    if error:
        await message.answer(error, parse_mode="MarkdownV2")
        return
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≤–Ω—É –º–µ–∂–¥—É –≤—Å–µ–º–∏ –Ω–∞–º–∞–∑–∞–º–∏
    per_prayer = int(total_count // 6)
    
    prayers_data = {
        'fajr': per_prayer,
        'zuhr': per_prayer,
        'asr': per_prayer,
        'maghrib': per_prayer,
        'isha': per_prayer,
        'witr': per_prayer,
        'zuhr_safar': 0,
        'asr_safar': 0,
        'isha_safar': 0
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await prayer_service.set_user_prayers(message.from_user.id, prayers_data)
    
    result_text = calculation_service.format_calculation_summary(prayers_data)
    
    await message.answer(escape_markdown(result_text, "()-?.!_="), reply_markup=get_main_menu_keyboard(), parse_mode="MarkdownV2")
    await state.clear()

@router.message(PrayerCalculationStates.manual_input_count)
async def process_manual_count_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–º–∞–∑–æ–≤"""
    total_count, error = validate_number_input(message.text, min_val=0, integer_only=True)
    if error:
        await message.answer(error, parse_mode="MarkdownV2")
        return
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≤–Ω—É –º–µ–∂–¥—É –≤—Å–µ–º–∏ –Ω–∞–º–∞–∑–∞–º–∏
    per_prayer = int(total_count)
    
    prayers_data = {
        'fajr': per_prayer,
        'zuhr': per_prayer,
        'asr': per_prayer,
        'maghrib': per_prayer,
        'isha': per_prayer,
        'witr': per_prayer,
        'zuhr_safar': 0,
        'asr_safar': 0,
        'isha_safar': 0
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await prayer_service.set_user_prayers(message.from_user.id, prayers_data)
    
    result_text = calculation_service.format_calculation_summary(prayers_data)
    
    await message.answer(escape_markdown(result_text, "()-?.!_="), reply_markup=get_main_menu_keyboard(), parse_mode="MarkdownV2")
    await state.clear()

# ======================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ñ–ï–ù–©–ò–ù
# ======================================

@router.callback_query(PrayerCalculationStates.choosing_method, F.data == "female_manual")
async def female_manual_input(callback: CallbackQuery, state: FSMContext):
    """–†—É—á–Ω–æ–π –≤–≤–æ–¥ –Ω–∞–º–∞–∑–æ–≤ –¥–ª—è –∂–µ–Ω—â–∏–Ω—ã"""
    await callback.message.edit_text(
        "‚úã **–†—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–º–∞–∑–æ–≤**\n\n"
        "–í–≤–µ–¥–∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 1200",
        parse_mode="MarkdownV2"
    )
    await state.set_state(PrayerCalculationStates.manual_input_count)

@router.callback_query(PrayerCalculationStates.choosing_method, F.data == "female_guide")
async def female_detailed_guide(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ä–æ–±–Ω—ã–π –≥–∞–π–¥ –¥–ª—è –∂–µ–Ω—â–∏–Ω"""
    guide_text = escape_markdown("""
üìñ **–ü–æ–¥—Ä–æ–±–Ω—ã–π –≥–∞–π–¥ –ø–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—é –Ω–∞–º–∞–∑–æ–≤ –¥–ª—è –∂–µ–Ω—â–∏–Ω**

**–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:**

üïå **–ß—Ç–æ —É—á–∏—Ç—ã–≤–∞–µ–º:**
‚Ä¢ –î–∞—Ç–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è (–ø–µ—Ä–≤—ã–µ –º–µ—Å—è—á–Ω—ã–µ)
‚Ä¢ –ü–µ—Ä–∏–æ–¥—ã —Ö–∞–π–¥–∞ (–º–µ—Å—è—á–Ω—ã—Ö) - –ù–ï —á–∏—Ç–∞–µ–º –Ω–∞–º–∞–∑
‚Ä¢ –ü–µ—Ä–∏–æ–¥—ã –Ω–∏—Ñ–∞—Å–∞ (–ø–æ—Å–ª–µ—Ä–æ–¥–æ–≤—ã–µ –∫—Ä–æ–≤–æ—Ç–µ—á–µ–Ω–∏—è) - –ù–ï —á–∏—Ç–∞–µ–º –Ω–∞–º–∞–∑
‚Ä¢ –†–æ–¥—ã –∏ –≤—ã–∫–∏–¥—ã—à–∏
‚Ä¢ –ú–µ–Ω–æ–ø–∞—É–∑–∞ (–µ—Å–ª–∏ –±—ã–ª–∞)

‚öñÔ∏è **–ü–æ —Ö–∞–Ω–∞—Ñ–∏—Ç—Å–∫–æ–º—É –º–∞–∑—Ö–∞–±—É:**
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞: 3 –¥–Ω—è (72 —á–∞—Å–∞)
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞: 10 –¥–Ω–µ–π (240 —á–∞—Å–æ–≤)
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∏—Ñ–∞—Å–∞: 40 –¥–Ω–µ–π (960 —á–∞—Å–æ–≤)
‚Ä¢ –ú–µ–∂–¥—É –º–µ—Å—è—á–Ω—ã–º–∏ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –º–∏–Ω–∏–º—É–º 15 –¥–Ω–µ–π (360 —á)

üî¨ **–ö–∞–∫ —Å—á–∏—Ç–∞–µ–º:**
1. –ë–µ—Ä–µ–º –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ –æ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è –¥–æ –Ω–∞—á–∞–ª–∞ —á—Ç–µ–Ω–∏—è 6 –Ω–∞–º–∞–∑–æ–≤
2. –í—ã—á–∏—Ç–∞–µ–º –≤—Å–µ –¥–Ω–∏ –Ω–∏—Ñ–∞—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ø–∞–ª–∏ –≤ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥
3. –í—ã—á–∏—Ç–∞–µ–º –¥–Ω–∏ —Ö–∞–π–¥–∞ (—Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏)
4. –ï—Å–ª–∏ –±—ã–ª–∞ –º–µ–Ω–æ–ø–∞—É–∑–∞ - –ø—Ä–∏–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –æ—Ç –º–µ–Ω–æ–ø–∞—É–∑—ã –¥–æ –Ω–∞—á–∞–ª–∞ –Ω–∞–º–∞–∑–æ–≤
5. –ü–æ–ª—É—á–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ –Ω–∞–º–∞–∑–æ–≤

üìö **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏–∑—É—á–∏—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ç–µ–º—ã "—Ö–∞–π–¥", "–Ω–∏—Ñ–∞—Å" –∏ "–∏—Å—Ç–∏—Ö–∞–¥–∞" –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞.**

–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π:""", "()-?.!_=")
    
    await callback.message.edit_text(guide_text, parse_mode="MarkdownV2")
    await state.set_state(PrayerCalculationStates.manual_input_count)

@router.callback_query(PrayerCalculationStates.choosing_method, F.data.startswith("female_"))
async def start_female_detailed_calculation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è –∂–µ–Ω—â–∏–Ω"""
    method = callback.data
    
    if method == "female_know_maturity":
        text = ("üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏–µ –ø–æ –∏—Å–ª–∞–º—É –Ω–∞—Å—Ç—É–ø–∞–µ—Ç —Å –ø—Ä–∏—Ö–æ–¥–æ–º –ø–µ—Ä–≤–æ–≥–æ —Ö–∞–π–¥–∞ \(–º–µ—Å—è—á–Ω—ã—Ö\)\.\n\n"
                "–£–∫–∞–∂–∏ –¥–∞—Ç—É —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î\.–ú–ú\.–ì–ì–ì–ì:\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 10\.05\.2015")
        await state.set_state(PrayerCalculationStates.female_maturity_date_input)
    else:  # female_no_maturity
        text = ("ü§î –°–ø—Ä–æ—Å–∏ —É —Ä–æ–¥–Ω—ã—Ö, —Ä–∞—Å–∫–æ–ø–∞–π –∞—Ä—Ö–∏–≤—ã, –≤—Å–ø–æ–º–Ω–∏ —Å–æ–±—ã—Ç–∏—è —Å–≤–æ–µ–≥–æ 9\-15\-–ª–µ—Ç–Ω–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞\.\n\n"
                "–ï—Å–ª–∏ –Ω–µ –ø–æ–º–Ω–∏—à—å, —Ç–æ –≤–æ–∑—å–º–∏ –∑–∞ –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è 8\.5 –ª–µ—Ç\.\n\n"
                "–£–∫–∞–∂–∏ –¥–∞—Ç—É —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î\.–ú–ú\.–ì–ì–ì–ì:\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 15\.08\.2012")
        await state.set_state(PrayerCalculationStates.female_no_maturity_date_input)
    
    await callback.message.edit_text(text, parse_mode="MarkdownV2")

# –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –ñ–ï–ù–°–ö–ò–• –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í

@router.message(PrayerCalculationStates.female_maturity_date_input)
@router.message(PrayerCalculationStates.female_no_maturity_date_input)
async def process_female_maturity_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è –∂–µ–Ω—â–∏–Ω—ã"""
    maturity_date, error = validate_date_input(message.text, max_date=date.today())
    if error:
        await message.answer(error, parse_mode="MarkdownV2")
        return
    
    await state.update_data(maturity_date=maturity_date)
    
    cycle_info_text = escape_markdown("""
üåô –†–µ–≥—É–ª—è—Ä–Ω—ã–π –ª–∏ —É —Ç–µ–±—è —Ü–∏–∫–ª?

–ü–æ —Ö–∞–Ω–∞—Ñ–∏—Ç—Å–∫–æ–º—É –º–∞–∑—Ö–∞–±—É:
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞: 3 –¥–Ω—è (72 —á–∞—Å–∞)
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞: 10 –¥–Ω–µ–π (240 —á–∞—Å–æ–≤)

–ï—Å–ª–∏ —Ö–∞–π–¥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –±–æ–ª–µ–µ 10 –¥–Ω–µ–π, —Ç–æ –ø–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—à–ª–æ–≥–æ —Ö–∞–π–¥–∞ –∏ –∏–∑ 10 –¥–Ω–µ–π –≤—ã—á—Ç–∏ —ç—Ç–æ —á–∏—Å–ª–æ - —ç—Ç–∏ –¥–Ω–∏ –∏—Å—Ç–∏—Ö–∞–¥–∞ (–ø–µ—Ä–∏–æ–¥ –∫—Ä–æ–≤–æ—Ç–µ—á–µ–Ω–∏—è), –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≤–µ—Ä—à–∞—Ç—å –Ω–∞–º–∞–∑.

–ú–µ–∂–¥—É –º–µ—Å—è—á–Ω—ã–º–∏ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –Ω–µ –º–µ–Ω–µ–µ 15 –¥–Ω–µ–π (360 —á). –ï—Å–ª–∏ –º–µ–Ω—å—à–µ - —ç—Ç–æ –∏—Å—Ç–∏—Ö–∞–¥–∞, –Ω–µ —Ö–∞–π–¥.

–°–æ–≤–µ—Ç—É–µ–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç—å —Ç–µ–º—É "—Ö–∞–π–¥–∞" –¥–ª—è –±–æ–ª–µ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞.""", "()-?.!_=")
    
    await message.answer(
        cycle_info_text,
        reply_markup=get_yes_no_keyboard("female_regular_yes", "female_regular_no"),
        parse_mode="MarkdownV2"
    )
    await state.set_state(PrayerCalculationStates.female_regular_cycle_question)

@router.callback_query(PrayerCalculationStates.female_regular_cycle_question, F.data.startswith("female_regular_"))
async def process_female_cycle_regularity(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏ —Ü–∏–∫–ª–∞"""
    regular_cycle = callback.data == "female_regular_yes"
    await state.update_data(regular_cycle=regular_cycle)
    
    if regular_cycle:
        await callback.message.edit_text(
            "üìè –í–≤–µ–¥–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞ –≤ –¥–Ω—è—Ö:",
            reply_markup=get_hayd_duration_keyboard()
        )
        await state.set_state(PrayerCalculationStates.female_cycle_length_input)
    else:
        await callback.message.edit_text(
            "üìä –§–∏–∫—Å–∏—Ä—É–µ—à—å –ª–∏ —Ç—ã –¥–Ω–∏ —Ö–∞–π–¥–∞ —Å —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è?",
            reply_markup=get_yes_no_keyboard("female_track_yes", "female_track_no"),
            parse_mode="MarkdownV2"
        )
        await state.set_state(PrayerCalculationStates.female_track_hayd_question)

@router.callback_query(PrayerCalculationStates.female_cycle_length_input, F.data.startswith("hayd_days_"))
async def process_female_hayd_duration(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ö–∞–π–¥–∞"""
    if callback.data == "hayd_days_manual":
        await callback.message.edit_text(
            "üìè –í–≤–µ–¥–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞ –≤ –¥–Ω—è—Ö \(–æ—Ç 3 –¥–æ 10\):\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 5",
            parse_mode="MarkdownV2"
        )
        return
    
    hayd_days = int(callback.data.split("_")[2])
    await state.update_data(hayd_average_days=hayd_days)
    await ask_about_births(callback, state)

@router.message(PrayerCalculationStates.female_cycle_length_input)
async def process_female_hayd_duration_manual(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ö–∞–π–¥–∞"""
    hayd_days, error = validate_number_input(message.text, min_val=3, max_val=10)
    if error:
        await message.answer(error, parse_mode="MarkdownV2")
        return
    
    await state.update_data(hayd_average_days=hayd_days)
    
    class FakeCallback:
        def __init__(self, message):
            self.message = message
    
    await ask_about_births(FakeCallback(message), state, is_message=True)

@router.callback_query(PrayerCalculationStates.female_track_hayd_question, F.data.startswith("female_track_"))
async def process_female_track_hayd(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ö–∞–π–¥–∞"""
    tracks_hayd = callback.data == "female_track_yes"
    await state.update_data(tracks_hayd=tracks_hayd)
    
    if tracks_hayd:
        await callback.message.edit_text(
            "üìä –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Ö–∞–π–¥–∞ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥:\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 180",
            parse_mode="MarkdownV2"
        )
        await state.set_state(PrayerCalculationStates.female_total_hayd_days_input)
    else:
        await callback.message.edit_text(
            "üìè –í–≤–µ–¥–∏ —Å—Ä–µ–¥–Ω—é—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞ —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è –¥–æ —Ä–æ–¥–æ–≤/–≤—ã–∫–∏–¥—ã—à–∞, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏:",
            reply_markup=get_hayd_duration_keyboard()
        )
        await state.set_state(PrayerCalculationStates.female_average_hayd_input)

@router.message(PrayerCalculationStates.female_total_hayd_days_input)
async def process_female_total_hayd_days(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π —Ö–∞–π–¥–∞"""
    total_hayd_days, error = validate_number_input(message.text, min_val=0, integer_only=True)
    if error:
        await message.answer(error, parse_mode="MarkdownV2")
        return
    
    await state.update_data(total_hayd_days=total_hayd_days)
    
    class FakeCallback:
        def __init__(self, message):
            self.message = message
    
    await ask_about_births(FakeCallback(message), state, is_message=True)

@router.callback_query(PrayerCalculationStates.female_average_hayd_input, F.data.startswith("hayd_days_"))
async def process_female_average_hayd(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–µ–¥–Ω–µ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ö–∞–π–¥–∞"""
    if callback.data == "hayd_days_manual":
        await callback.message.edit_text(
            "üìè –í–≤–µ–¥–∏ —Å—Ä–µ–¥–Ω—é—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞ –≤ –¥–Ω—è—Ö:\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 5",
            parse_mode="MarkdownV2"
        )
        return
    
    hayd_days = int(callback.data.split("_")[2])
    await state.update_data(hayd_average_days=hayd_days)
    await ask_about_births(callback, state)

@router.message(PrayerCalculationStates.female_average_hayd_input)
async def process_female_average_hayd_manual(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Å—Ä–µ–¥–Ω–µ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ö–∞–π–¥–∞"""
    hayd_days, error = validate_number_input(message.text, min_val=0)
    if error:
        await message.answer(error, parse_mode="MarkdownV2")
        return
    
    await state.update_data(hayd_average_days=hayd_days)
    
    class FakeCallback:
        def __init__(self, message):
            self.message = message
    
    await ask_about_births(FakeCallback(message), state, is_message=True)

async def ask_about_births(callback_or_message, state: FSMContext, is_message=False):
    """–í–æ–ø—Ä–æ—Å –æ —Ä–æ–¥–∞—Ö"""
    text = "üë∂ –ë—ã–ª–∏ –ª–∏ —É —Ç–µ–±—è —Ä–æ–¥—ã\? \(–†–æ–¥—ã, –Ω–µ –≤—ã–∫–∏–¥—ã—à–∏\)"
    keyboard = get_yes_no_keyboard("female_births_yes", "female_births_no")
    
    if is_message:
        await callback_or_message.message.answer(text, reply_markup=keyboard, parse_mode="MarkdownV2")
    else:
        await callback_or_message.message.edit_text(text, reply_markup=keyboard, parse_mode="MarkdownV2")
    
    await state.set_state(PrayerCalculationStates.female_births_question)

@router.callback_query(PrayerCalculationStates.female_births_question, F.data == "female_births_yes")
async def female_has_births(callback: CallbackQuery, state: FSMContext):
    """–£ –∂–µ–Ω—â–∏–Ω—ã –±—ã–ª–∏ —Ä–æ–¥—ã"""
    await callback.message.edit_text(
        "üë∂ –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ —É —Ç–µ–±—è –±—ã–ª–∏ —Ä–æ–¥—ã?",
        reply_markup=get_births_count_keyboard()
    )
    await state.set_state(PrayerCalculationStates.female_births_count_input)

@router.callback_query(PrayerCalculationStates.female_births_question, F.data == "female_births_no")
async def female_no_births(callback: CallbackQuery, state: FSMContext):
    """–£ –∂–µ–Ω—â–∏–Ω—ã –Ω–µ –±—ã–ª–æ —Ä–æ–¥–æ–≤"""
    await state.update_data(births_data=[])
    await ask_about_miscarriages(callback, state)

@router.callback_query(PrayerCalculationStates.female_births_count_input, F.data.startswith("births_count_"))
async def process_female_births_count(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–æ–¥–æ–≤"""
    if callback.data == "births_count_manual":
        await callback.message.edit_text(
            "üë∂ –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–¥–æ–≤ —á–∏—Å–ª–æ–º:\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 8"
        )
        return
    
    births_count = int(callback.data.split("_")[2])
    await state.update_data(
        births_count=births_count,
        births_data=[],
        current_birth=1
    )
    
    await ask_birth_date(callback, state, 1)

@router.message(PrayerCalculationStates.female_births_count_input)
async def process_female_births_count_manual(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–æ–¥–æ–≤"""
    births_count, error = validate_number_input(message.text, min_val=1, integer_only=True)
    if error:
        await message.answer(error, parse_mode="MarkdownV2")
        return
    
    await state.update_data(
        births_count=int(births_count),
        births_data=[],
        current_birth=1
    )
    
    class FakeCallback:
        def __init__(self, message):
            self.message = message
    
    await ask_birth_date(FakeCallback(message), state, 1, is_message=True)

async def ask_birth_date(callback_or_message, state: FSMContext, birth_number: int, is_message=False):
    """–ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã —Ä–æ–¥–æ–≤"""
    text = (f"üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É {birth_number}\-—Ö —Ä–æ–¥–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î\.–ú–ú\.–ì–ì–ì–ì:\n\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: 20\.03\.2018")
    
    if is_message:
        await callback_or_message.message.answer(text, parse_mode="MarkdownV2")
    else:
        await callback_or_message.message.edit_text(text, parse_mode="MarkdownV2")
    
    await state.set_state(PrayerCalculationStates.female_birth_date_input)

@router.message(PrayerCalculationStates.female_birth_date_input)
async def process_female_birth_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–¥–æ–≤"""
    data = await state.get_data()
    maturity_date = data['maturity_date']
    
    birth_date, error = validate_date_input(message.text, min_date=maturity_date, max_date=date.today())
    if error:
        await message.answer(error, parse_mode="MarkdownV2")
        return
    
    await state.update_data(current_birth_date=birth_date)
    
    current_birth = data['current_birth']
    nifas_text = escape_markdown(f"""
üåô –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∏—Ñ–∞—Å–∞ –ø–æ—Å–ª–µ {current_birth}-—Ö —Ä–æ–¥–æ–≤.

–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∏—Ñ–∞—Å–∞ 40 –¥–Ω–µ–π (960—á). 
–°–æ–≤–µ—Ç—É–µ–º —Ç–µ–±–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç—å —ç—Ç—É —Ç–µ–º—É –¥–ª—è –±–æ–ª–µ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –Ω–∏—Ñ–∞—Å–∞.""", "()-?.!_=")
    
    await message.answer(
        nifas_text,
        reply_markup=get_nifas_duration_keyboard(),
        parse_mode="MarkdownV2"
    )
    await state.set_state(PrayerCalculationStates.female_birth_nifas_input)

@router.callback_query(PrayerCalculationStates.female_birth_nifas_input, F.data.startswith("nifas_days_"))
async def process_female_birth_nifas(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∏—Ñ–∞—Å–∞ –ø–æ—Å–ª–µ —Ä–æ–¥–æ–≤"""
    if callback.data == "nifas_days_manual":
        await callback.message.edit_text(
            "üåô –í–≤–µ–¥–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∏—Ñ–∞—Å–∞ –≤ –¥–Ω—è—Ö \(–æ—Ç 0 –¥–æ 40\):\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 30",
            parse_mode="MarkdownV2"
        )
        return
    
    nifas_days = int(callback.data.split("_")[2])
    await process_birth_nifas_data(callback, state, nifas_days)

@router.message(PrayerCalculationStates.female_birth_nifas_input)
async def process_female_birth_nifas_manual(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∏—Ñ–∞—Å–∞"""
    nifas_days, error = validate_number_input(message.text, min_val=0, max_val=40, integer_only=True)
    if error:
        await message.answer(error, parse_mode="MarkdownV2")
        return
    
    class FakeCallback:
        def __init__(self, message):
            self.message = message
    
    await process_birth_nifas_data(FakeCallback(message), state, int(nifas_days), is_message=True)

async def process_birth_nifas_data(callback_or_message, state: FSMContext, nifas_days: int, is_message=False):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∏—Ñ–∞—Å–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É"""
    data = await state.get_data()
    current_birth = data['current_birth']
    
    birth_data = {
        'date': data['current_birth_date'],
        'nifas_days': nifas_days
    }
    
    # –ï—Å–ª–∏ —Ü–∏–∫–ª –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã–π, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —Ö–∞–π–¥ –ø–æ—Å–ª–µ —Ä–æ–¥–æ–≤
    logger.error(data)
    if not data.get('regular_cycle', False) and not data.get('tracks_hayd', False):
        text = f"üìä –í–≤–µ–¥–∏ —Å—Ä–µ–¥–Ω—é—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞ –ø–æ—Å–ª–µ {current_birth}\-—Ö —Ä–æ–¥–æ–≤:"
        keyboard = get_hayd_duration_keyboard()
        
        if is_message:
            await callback_or_message.message.answer(text, reply_markup=keyboard, parse_mode="MarkdownV2")
        else:
            await callback_or_message.message.edit_text(text, reply_markup=keyboard, parse_mode="MarkdownV2")
        
        await state.update_data(current_birth_data=birth_data)
        await state.set_state(PrayerCalculationStates.female_birth_hayd_after_input)
    else:
        # –î–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞
        birth_data['hayd_after'] = data.get('hayd_average_days', 5)
        await complete_birth_processing(callback_or_message, state, birth_data, is_message)

@router.callback_query(PrayerCalculationStates.female_birth_hayd_after_input, F.data.startswith("hayd_days_"))
async def process_female_birth_hayd_after(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–∞–π–¥–∞ –ø–æ—Å–ª–µ —Ä–æ–¥–æ–≤"""
    if callback.data == "hayd_days_manual":
        await callback.message.edit_text(
            "üìä –í–≤–µ–¥–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞ –≤ –¥–Ω—è—Ö \(–æ—Ç 3 –¥–æ 10\):\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 6",
            parse_mode="MarkdownV2"
        )
        return
    
    hayd_days = int(callback.data.split("_")[2])
    data = await state.get_data()
    birth_data = data['current_birth_data']
    birth_data['hayd_after'] = hayd_days
    
    await complete_birth_processing(callback, state, birth_data)

@router.message(PrayerCalculationStates.female_birth_hayd_after_input)
async def process_female_birth_hayd_after_manual(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ö–∞–π–¥–∞ –ø–æ—Å–ª–µ —Ä–æ–¥–æ–≤"""
    hayd_days, error = validate_number_input(message.text, min_val=3, max_val=10)
    if error:
        await message.answer(error, parse_mode="MarkdownV2")
        return
    
    data = await state.get_data()
    birth_data = data['current_birth_data']
    birth_data['hayd_after'] = hayd_days
    
    class FakeCallback:
        def __init__(self, message):
            self.message = message
    
    await complete_birth_processing(FakeCallback(message), state, birth_data, is_message=True)

async def complete_birth_processing(callback_or_message, state: FSMContext, birth_data: dict, is_message=False):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—É—â–∏—Ö —Ä–æ–¥–æ–≤"""
    data = await state.get_data()
    births_data = data.get('births_data', [])
    births_data.append(birth_data)
    
    current_birth = data['current_birth']
    total_births = data['births_count']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Ä–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if current_birth < total_births:
        next_birth = current_birth + 1
        await state.update_data(
            births_data=births_data,
            current_birth=next_birth
        )
        await ask_birth_date(callback_or_message, state, next_birth, is_message)
    else:
        # –í—Å–µ —Ä–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–∫–∏–¥—ã—à–∞–º
        await state.update_data(births_data=births_data)
        await ask_about_miscarriages(callback_or_message, state, is_message)

async def ask_about_miscarriages(callback_or_message, state: FSMContext, is_message=False):
    """–í–æ–ø—Ä–æ—Å –æ –≤—ã–∫–∏–¥—ã—à–∞—Ö"""
    miscarriage_info = escape_markdown("""
ü§± **–í—ã–∫–∏–¥—ã—à–∏**

–ü–æ —Ö–∞–Ω–∞—Ñ–∏—Ç—Å–∫–æ–º—É –º–∞–∑—Ö–∞–±—É, –µ—Å–ª–∏ –≤—ã–∫–∏–¥—ã—à –ø—Ä–æ–∏–∑–æ—à–µ–ª –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —ç–º–±—Ä–∏–æ–Ω–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ—Å–ª–µ 120 –¥–Ω–µ–π –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏), —Ç–æ –ø–æ—Å–ª–µ –Ω–µ–≥–æ –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –Ω–∏—Ñ–∞—Å.

–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∏—Ñ–∞—Å–∞ –ø–æ—Å–ª–µ –≤—ã–∫–∏–¥—ã—à–∞ —Ç–∞–∫–∂–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 40 –¥–Ω–µ–π.

–ï—Å–ª–∏ –≤—ã–∫–∏–¥—ã—à –±—ã–ª –Ω–∞ —Ä–∞–Ω–Ω–µ–º —Å—Ä–æ–∫–µ (–¥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —ç–º–±—Ä–∏–æ–Ω–∞), —Ç–æ —ç—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º –∫—Ä–æ–≤–æ—Ç–µ—á–µ–Ω–∏–µ–º (–∏—Å—Ç–∏—Ö–∞–¥–∞), –≤–æ –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —á–∏—Ç–∞—Ç—å –Ω–∞–º–∞–∑.

–ë—ã–ª–∏ –ª–∏ —É —Ç–µ–±—è –≤—ã–∫–∏–¥—ã—à–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–≤—à–µ–≥–æ—Å—è —ç–º–±—Ä–∏–æ–Ω–∞?""", "()-?.!_=")
    
    keyboard = get_yes_no_keyboard("female_miscarriages_yes", "female_miscarriages_no")
    
    if is_message:
        await callback_or_message.message.answer(miscarriage_info, reply_markup=keyboard, parse_mode="MarkdownV2")
    else:
        await callback_or_message.message.edit_text(miscarriage_info, reply_markup=keyboard, parse_mode="MarkdownV2")
    
    await state.set_state(PrayerCalculationStates.female_miscarriages_question)

@router.callback_query(PrayerCalculationStates.female_miscarriages_question, F.data == "female_miscarriages_yes")
async def female_has_miscarriages(callback: CallbackQuery, state: FSMContext):
    """–£ –∂–µ–Ω—â–∏–Ω—ã –±—ã–ª–∏ –≤—ã–∫–∏–¥—ã—à–∏"""
    await callback.message.edit_text(
        "ü§± –°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –±—ã–ª–æ –≤—ã–∫–∏–¥—ã—à–µ–π —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–≤—à–µ–≥–æ—Å—è —ç–º–±—Ä–∏–æ–Ω–∞?",
        reply_markup=get_miscarriages_count_keyboard()
    )
    await state.set_state(PrayerCalculationStates.female_miscarriages_count_input)

@router.callback_query(PrayerCalculationStates.female_miscarriages_question, F.data == "female_miscarriages_no")
async def female_no_miscarriages(callback: CallbackQuery, state: FSMContext):
    """–£ –∂–µ–Ω—â–∏–Ω—ã –Ω–µ –±—ã–ª–æ –≤—ã–∫–∏–¥—ã—à–µ–π"""
    await state.update_data(miscarriages_data=[])
    await ask_about_menopause(callback, state)

@router.callback_query(PrayerCalculationStates.female_miscarriages_count_input, F.data.startswith("miscarriages_count_"))
async def process_female_miscarriages_count(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–∫–∏–¥—ã—à–µ–π"""
    if callback.data == "miscarriages_count_manual":
        await callback.message.edit_text(
            "ü§± –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∫–∏–¥—ã—à–µ–π —á–∏—Å–ª–æ–º:\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 2"
        )
        return
    
    miscarriages_count = int(callback.data.split("_")[2])
    await state.update_data(
        miscarriages_count=miscarriages_count,
        miscarriages_data=[],
        current_miscarriage=1
    )
    
    await ask_miscarriage_date(callback, state, 1)

@router.message(PrayerCalculationStates.female_miscarriages_count_input)
async def process_female_miscarriages_count_manual(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–∫–∏–¥—ã—à–µ–π"""
    miscarriages_count, error = validate_number_input(message.text, min_val=1, integer_only=True)
    if error:
        await message.answer(error, parse_mode="MarkdownV2")
        return
    
    await state.update_data(
        miscarriages_count=int(miscarriages_count),
        miscarriages_data=[],
        current_miscarriage=1
    )
    
    class FakeCallback:
        def __init__(self, message):
            self.message = message
    
    await ask_miscarriage_date(FakeCallback(message), state, 1, is_message=True)

async def ask_miscarriage_date(callback_or_message, state: FSMContext, miscarriage_number: int, is_message=False):
    """–ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –≤—ã–∫–∏–¥—ã—à–∞"""
    text = (f"üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É {miscarriage_number}\-–≥–æ –≤—ã–∫–∏–¥—ã—à–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î\.–ú–ú\.–ì–ì–ì–ì:\n\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: 15\.07\.2019")
    
    if is_message:
        await callback_or_message.message.answer(text, parse_mode="MarkdownV2")
    else:
        await callback_or_message.message.edit_text(text, parse_mode="MarkdownV2")
    
    await state.set_state(PrayerCalculationStates.female_miscarriage_date_input)

@router.message(PrayerCalculationStates.female_miscarriage_date_input)
async def process_female_miscarriage_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –≤—ã–∫–∏–¥—ã—à–∞"""
    data = await state.get_data()
    maturity_date = data['maturity_date']
    
    miscarriage_date, error = validate_date_input(message.text, min_date=maturity_date, max_date=date.today())
    if error:
        await message.answer(error, parse_mode="MarkdownV2")
        return
    
    await state.update_data(current_miscarriage_date=miscarriage_date)
    
    current_miscarriage = data['current_miscarriage']
    nifas_text = escape_markdown(f"""
üåô –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∏—Ñ–∞—Å–∞ –ø–æ—Å–ª–µ {current_miscarriage}-–≥–æ –≤—ã–∫–∏–¥—ã—à–∞.

–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∏—Ñ–∞—Å–∞ 40 –¥–Ω–µ–π (960—á).
–ï—Å–ª–∏ –≤—ã–∫–∏–¥—ã—à –±—ã–ª –Ω–∞ —Ä–∞–Ω–Ω–µ–º —Å—Ä–æ–∫–µ (–¥–æ 120 –¥–Ω–µ–π), —Ç–æ –≤–≤–µ–¥–∏ 0 –¥–Ω–µ–π.""", "()-?.!_=")
    
    await message.answer(
        nifas_text,
        reply_markup=get_nifas_duration_keyboard(),
        parse_mode="MarkdownV2"
    )
    await state.set_state(PrayerCalculationStates.female_miscarriage_nifas_input)

@router.callback_query(PrayerCalculationStates.female_miscarriage_nifas_input, F.data.startswith("nifas_days_"))
async def process_female_miscarriage_nifas(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∏—Ñ–∞—Å–∞ –ø–æ—Å–ª–µ –≤—ã–∫–∏–¥—ã—à–∞"""
    if callback.data == "nifas_days_manual":
        await callback.message.edit_text(
            "üåô –í–≤–µ–¥–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∏—Ñ–∞—Å–∞ –≤ –¥–Ω—è—Ö \(–æ—Ç 0 –¥–æ 40\):\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15",
            parse_mode="MarkdownV2"
        )
        return
    
    nifas_days = int(callback.data.split("_")[2])
    await process_miscarriage_nifas_data(callback, state, nifas_days)

@router.message(PrayerCalculationStates.female_miscarriage_nifas_input)
async def process_female_miscarriage_nifas_manual(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∏—Ñ–∞—Å–∞ –ø–æ—Å–ª–µ –≤—ã–∫–∏–¥—ã—à–∞"""
    nifas_days, error = validate_number_input(message.text, min_val=0, max_val=40, integer_only=True)
    if error:
        await message.answer(error, parse_mode="MarkdownV2")
        return
    
    class FakeCallback:
        def __init__(self, message):
            self.message = message
    
    await process_miscarriage_nifas_data(FakeCallback(message), state, int(nifas_days), is_message=True)

async def process_miscarriage_nifas_data(callback_or_message, state: FSMContext, nifas_days: int, is_message=False):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∏—Ñ–∞—Å–µ –ø–æ—Å–ª–µ –≤—ã–∫–∏–¥—ã—à–∞"""
    data = await state.get_data()
    current_miscarriage = data['current_miscarriage']
    
    miscarriage_data = {
        'date': data['current_miscarriage_date'],
        'nifas_days': nifas_days
    }
    
    # –ï—Å–ª–∏ —Ü–∏–∫–ª –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã–π, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —Ö–∞–π–¥ –ø–æ—Å–ª–µ –≤—ã–∫–∏–¥—ã—à–∞
    if not data.get('regular_cycle', False) and not data.get('tracks_hayd', False):
        text = f"üìä –í–≤–µ–¥–∏ —Å—Ä–µ–¥–Ω—é—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞ –ø–æ—Å–ª–µ {current_miscarriage}\-–≥–æ –≤—ã–∫–∏–¥—ã—à–∞:"
        keyboard = get_hayd_duration_keyboard()
        
        if is_message:
            await callback_or_message.message.answer(text, reply_markup=keyboard, parse_mode="MarkdownV2")
        else:
            await callback_or_message.message.edit_text(text, reply_markup=keyboard, parse_mode="MarkdownV2")
        
        await state.update_data(current_miscarriage_data=miscarriage_data)
        await state.set_state(PrayerCalculationStates.female_miscarriage_hayd_after_input)
    else:
        # –î–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞
        miscarriage_data['hayd_after'] = data.get('hayd_average_days', 5)
        await complete_miscarriage_processing(callback_or_message, state, miscarriage_data, is_message)

@router.callback_query(PrayerCalculationStates.female_miscarriage_hayd_after_input, F.data.startswith("hayd_days_"))
async def process_female_miscarriage_hayd_after(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–∞–π–¥–∞ –ø–æ—Å–ª–µ –≤—ã–∫–∏–¥—ã—à–∞"""
    if callback.data == "hayd_days_manual":
        await callback.message.edit_text(
            "üìä –í–≤–µ–¥–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞ –≤ –¥–Ω—è—Ö \(–æ—Ç 3 –¥–æ 10\):\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 5",
            parse_mode="MarkdownV2"
        )
        return
    
    hayd_days = int(callback.data.split("_")[2])
    data = await state.get_data()
    miscarriage_data = data['current_miscarriage_data']
    miscarriage_data['hayd_after'] = hayd_days
    
    await complete_miscarriage_processing(callback, state, miscarriage_data)

@router.message(PrayerCalculationStates.female_miscarriage_hayd_after_input)
async def process_female_miscarriage_hayd_after_manual(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ö–∞–π–¥–∞ –ø–æ—Å–ª–µ –≤—ã–∫–∏–¥—ã—à–∞"""
    hayd_days, error = validate_number_input(message.text, min_val=3, max_val=10)
    if error:
        await message.answer(error, parse_mode="MarkdownV2")
        return
    
    data = await state.get_data()
    miscarriage_data = data['current_miscarriage_data']
    miscarriage_data['hayd_after'] = hayd_days
    
    class FakeCallback:
        def __init__(self, message):
            self.message = message
    
    await complete_miscarriage_processing(FakeCallback(message), state, miscarriage_data, is_message=True)

async def complete_miscarriage_processing(callback_or_message, state: FSMContext, miscarriage_data: dict, is_message=False):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–∫–∏–¥—ã—à–∞"""
    data = await state.get_data()
    miscarriages_data = data.get('miscarriages_data', [])
    miscarriages_data.append(miscarriage_data)
    
    current_miscarriage = data['current_miscarriage']
    total_miscarriages = data['miscarriages_count']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –≤—ã–∫–∏–¥—ã—à–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if current_miscarriage < total_miscarriages:
        next_miscarriage = current_miscarriage + 1
        await state.update_data(
            miscarriages_data=miscarriages_data,
            current_miscarriage=next_miscarriage
        )
        await ask_miscarriage_date(callback_or_message, state, next_miscarriage, is_message)
    else:
        # –í—Å–µ –≤—ã–∫–∏–¥—ã—à–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–µ–Ω–æ–ø–∞—É–∑–µ
        await state.update_data(miscarriages_data=miscarriages_data)
        await ask_about_menopause(callback_or_message, state, is_message)

async def ask_about_menopause(callback_or_message, state: FSMContext, is_message=False):
    """–í–æ–ø—Ä–æ—Å –æ –º–µ–Ω–æ–ø–∞—É–∑–µ"""
    menopause_info = escape_markdown("""
üåÖ **–ú–µ–Ω–æ–ø–∞—É–∑–∞**

–ú–µ–Ω–æ–ø–∞—É–∑–∞ - —ç—Ç–æ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ –º–µ—Å—è—á–Ω—ã—Ö.

–í–æ–∑—Ä–∞—Å—Ç –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 55 –ª—É–Ω–Ω—ã—Ö –ª–µ—Ç (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ 53 —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –≥–æ–¥–∞ –∏ 4 –º–µ—Å—è—Ü–∞).

–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è –º–µ–Ω–æ–ø–∞—É–∑—ã –∂–µ–Ω—â–∏–Ω–∞ –æ–±—è–∑–∞–Ω–∞ —á–∏—Ç–∞—Ç—å –Ω–∞–º–∞–∑ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —Ç–∞–∫ –∫–∞–∫ —É –Ω–µ—ë –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–µ—Ä–∏–æ–¥–æ–≤ —Ö–∞–π–¥–∞.

–ù–∞—Å—Ç—É–ø–∏–ª–∞ –ª–∏ —É —Ç–µ–±—è –º–µ–Ω–æ–ø–∞—É–∑–∞?""", "()-?.!_=")
    
    keyboard = get_yes_no_keyboard("female_menopause_yes", "female_menopause_no")
    
    if is_message:
        await callback_or_message.message.answer(menopause_info, reply_markup=keyboard, parse_mode="MarkdownV2")
    else:
        await callback_or_message.message.edit_text(menopause_info, reply_markup=keyboard, parse_mode="MarkdownV2")
    
    await state.set_state(PrayerCalculationStates.female_menopause_question)

@router.callback_query(PrayerCalculationStates.female_menopause_question, F.data == "female_menopause_yes")
async def female_has_menopause(callback: CallbackQuery, state: FSMContext):
    """–£ –∂–µ–Ω—â–∏–Ω—ã –±—ã–ª–∞ –º–µ–Ω–æ–ø–∞—É–∑–∞"""
    await callback.message.edit_text(
        "üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –º–µ–Ω–æ–ø–∞—É–∑—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î\.–ú–ú\.–ì–ì–ì–ì:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 10\.01\.2020",
        parse_mode="MarkdownV2"
    )
    await state.set_state(PrayerCalculationStates.female_menopause_date_input)

@router.callback_query(PrayerCalculationStates.female_menopause_question, F.data == "female_menopause_no")
async def female_no_menopause(callback: CallbackQuery, state: FSMContext):
    """–£ –∂–µ–Ω—â–∏–Ω—ã –Ω–µ –±—ã–ª–æ –º–µ–Ω–æ–ø–∞—É–∑—ã"""
    await state.update_data(menopause_date=None)
    await ask_prayer_start_date_female(callback, state)

@router.message(PrayerCalculationStates.female_menopause_date_input)
async def process_female_menopause_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –º–µ–Ω–æ–ø–∞—É–∑—ã"""
    data = await state.get_data()
    maturity_date = data['maturity_date']
    
    menopause_date, error = validate_date_input(message.text, min_date=maturity_date, max_date=date.today())
    if error:
        await message.answer(error, parse_mode="MarkdownV2")
        return
    
    await state.update_data(menopause_date=menopause_date)
    
    class FakeCallback:
        def __init__(self, message):
            self.message = message
    
    await ask_prayer_start_date_female(FakeCallback(message), state, is_message=True)

async def ask_prayer_start_date_female(callback_or_message, state: FSMContext, is_message=False):
    """–ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–º–∞–∑–æ–≤ –¥–ª—è –∂–µ–Ω—â–∏–Ω—ã"""
    text = ("üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è 6\-–∫—Ä–∞—Ç–Ω—ã—Ö –Ω–∞–º–∞–∑–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î\.–ú–ú\.–ì–ì–ì–ì:\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 01\.03\.2021")
    
    if is_message:
        await callback_or_message.message.answer(text, parse_mode="MarkdownV2")
    else:
        await callback_or_message.message.edit_text(text, parse_mode="MarkdownV2")
    
    await state.set_state(PrayerCalculationStates.female_prayer_start_date_input)

@router.message(PrayerCalculationStates.female_prayer_start_date_input)
async def process_female_prayer_start_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –Ω–∞–º–∞–∑–æ–≤ –¥–ª—è –∂–µ–Ω—â–∏–Ω—ã"""
    data = await state.get_data()
    maturity_date = data['maturity_date']
    
    prayer_start_date, error = validate_date_input(message.text, min_date=maturity_date, max_date=date.today())
    if error:
        await message.answer(error, parse_mode="MarkdownV2")
        return
    
    # –ü—Ä–æ–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
    await perform_female_calculation(message, state, prayer_start_date)

async def perform_female_calculation(message: Message, state: FSMContext, prayer_start_date: date):
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –Ω–∞–º–∞–∑–æ–≤ –¥–ª—è –∂–µ–Ω—â–∏–Ω—ã"""
    data = await state.get_data()
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
    maturity_date = data['maturity_date']
    regular_cycle = data.get('regular_cycle', False)
    menopause_date = data.get('menopause_date')
    births_data = data.get('births_data', [])
    miscarriages_data = data.get('miscarriages_data', [])
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ö–∞–π–¥–µ
    hayd_data = {}
    if data.get('total_hayd_days'):
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Ö–∞–π–¥–∞
        hayd_data['total_hayd_days'] = data['total_hayd_days']
        hayd_data['use_total'] = True
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω—é—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        hayd_data['average_hayd'] = data.get('hayd_average_days', 5)
        hayd_data['use_total'] = False
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
    try:
        prayers_data = calculation_service.calculate_female_prayers_complex(
            maturity_date=maturity_date,
            prayer_start_date=prayer_start_date,
            regular_cycle=regular_cycle,
            hayd_data=hayd_data,
            births_data=births_data,
            miscarriages_data=miscarriages_data,
            menopause_date=menopause_date
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await prayer_service.set_user_prayers(message.from_user.id, prayers_data)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞
        calculation_details = {
            'start_date': format_date(maturity_date),
            'end_date': format_date(prayer_start_date),
            'menopause_date': format_date(menopause_date) if menopause_date else None,
            'births_count': len(births_data),
            'miscarriages_count': len(miscarriages_data),
            'regular_cycle': regular_cycle
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = calculation_service.format_calculation_summary(prayers_data, calculation_details)
        
        await message.answer(
            escape_markdown(result_text, "()-?.!_="),
            reply_markup=get_main_menu_keyboard(),
            parse_mode="MarkdownV2"
        )
        
        logger.info(f"–ñ–µ–Ω—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {prayers_data}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –Ω–∞–º–∞–∑–æ–≤ –¥–ª—è –∂–µ–Ω—â–∏–Ω—ã {message.from_user.id}: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ\. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\.",
            reply_markup=get_main_menu_keyboard(),
            parse_mode="MarkdownV2"
        )
    
    await state.clear()

# ======================================
# –°–õ–£–ñ–ï–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ======================================

def validate_date_input(date_text: str, min_date: date = None, max_date: date = None) -> tuple[date, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã"""
    parsed_date = parse_date(date_text)
    if not parsed_date:
        return None, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã\. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –î–î\.–ú–ú\.–ì–ì–ì–ì"
    
    if min_date and parsed_date < min_date:
        return None, f"‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ {format_date(min_date)}\."
    
    if max_date and parsed_date > max_date:
        return None, f"‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ {format_date(max_date)}\."
    
    return parsed_date, ""

def validate_number_input(text: str, min_val: float = None, max_val: float = None, integer_only: bool = False) -> tuple[float, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
    try:
        if integer_only:
            value = int(text)
        else:
            value = float(text)
    except ValueError:
        return None, "‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ\."
    
    if min_val is not None and value < min_val:
        return None, f"‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ {min_val}\."
    
    if max_val is not None and value > max_val:
        return None, f"‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ {max_val}\."
    
    return value, ""

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
@router.message(Command("cancel"))
async def cancel_prayer_calculation(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–º–∞–∑–æ–≤"""
    current_state = await state.get_state()
    if current_state and current_state.startswith("PrayerCalculationStates"):
        await state.clear()
        await message.answer(
            "‚ùå –†–∞—Å—á–µ—Ç –Ω–∞–º–∞–∑–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω\.",
            reply_markup=get_main_menu_keyboard(),
            parse_mode="MarkdownV2"
        )