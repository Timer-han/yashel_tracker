from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from datetime import date, datetime
import logging

from ...keyboards.user.prayer_calc import get_calculation_method_keyboard, get_prayer_types_keyboard
from ...keyboards.user.main_menu import get_main_menu_keyboard
from ...keyboards.user.prayer_calc import get_prayer_type_selection_keyboard
from ....core.services.calculation_service import CalculationService
from ....core.services.prayer_service import PrayerService
from ....core.services.user_service import UserService
from ....core.config import config
from ...states.prayer_calculation import PrayerCalculationStates
from ...utils.date_utils import parse_date, format_date

logger = logging.getLogger(__name__)
router = Router()
calculation_service = CalculationService()
prayer_service = PrayerService()
user_service = UserService()

@router.message(F.text == "üî¢ –†–∞—Å—á–µ—Ç –Ω–∞–º–∞–∑–æ–≤")
async def start_prayer_calculation(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–º–∞–∑–æ–≤"""
    await state.clear()
    
    await message.answer(
        "üî¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–º–∞–∑–æ–≤:",
        reply_markup=get_calculation_method_keyboard()
    )
    await state.set_state(PrayerCalculationStates.choosing_method)

@router.callback_query(PrayerCalculationStates.choosing_method, F.data == "calc_from_age")
async def calc_from_age(callback: CallbackQuery, state: FSMContext):
    """–†–∞—Å—á–µ—Ç –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è"""
    await callback.message.edit_text(
        "üìÖ –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç –Ω–∞–º–∞–∑—ã –æ—Ç 12 –ª–µ—Ç –¥–æ –¥–∞—Ç—ã, –∫–æ–≥–¥–∞ –≤—ã –Ω–∞—á–∞–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ —Å–æ–≤–µ—Ä—à–∞—Ç—å –Ω–∞–º–∞–∑—ã.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –≤—ã –Ω–∞—á–∞–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ —Å–æ–≤–µ—Ä—à–∞—Ç—å 5 –Ω–∞–º–∞–∑–æ–≤ –≤ –¥–µ–Ω—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2020"
    )
    await state.set_state(PrayerCalculationStates.waiting_for_prayer_start_date)

@router.message(PrayerCalculationStates.waiting_for_prayer_start_date)
async def process_prayer_start_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–º–∞–∑–æ–≤"""
    prayer_start_date = parse_date(message.text)
    if not prayer_start_date:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await user_service.get_or_create_user(message.from_user.id)
    if not user.birth_date:
        await message.answer("‚ùå –î–ª—è —ç—Ç–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω—É–∂–Ω–∞ –≤–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–Ω–∞—á–∞–ª–∞.")
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–º–∞–∑—ã
    prayers_data = calculation_service.calculate_prayers_from_age(
        birth_date=user.birth_date,
        prayer_start_date=prayer_start_date
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await prayer_service.set_user_prayers(message.from_user.id, prayers_data)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    total_prayers = sum(prayers_data.values())
    result_text = (
        f"‚úÖ –†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        f"üìä –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ –Ω–∞–º–∞–∑–æ–≤ –æ—Ç {calculation_service.calculate_age(user.birth_date, user.birth_date.replace(year=user.birth_date.year + config.ADULT_AGE))} –ª–µ—Ç "
        f"–¥–æ {format_date(prayer_start_date)}:\n\n"
        f"üìù **–í—Å–µ–≥–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–º–∞–∑–æ–≤: {total_prayers}**\n\n"
        "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:\n"
    )
    
    for prayer_type, count in prayers_data.items():
        if count > 0:
            prayer_name = config.PRAYER_TYPES[prayer_type]
            result_text += f"‚Ä¢ {prayer_name}: {count}\n"
    
    result_text += "\nü§≤ –ü—É—Å—Ç—å –ê–ª–ª–∞—Ö –æ–±–ª–µ–≥—á–∏—Ç –≤–∞–º –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–µ!"
    
    await message.answer(result_text, reply_markup=get_main_menu_keyboard(), parse_mode="Markdown")
    await state.clear()

@router.callback_query(PrayerCalculationStates.choosing_method, F.data == "calc_between_dates")
async def calc_between_dates(callback: CallbackQuery, state: FSMContext):
    """–†–∞—Å—á–µ—Ç –º–µ–∂–¥—É –¥–≤—É–º—è –¥–∞—Ç–∞–º–∏"""
    await callback.message.edit_text(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É (—Å –∫–∞–∫–æ–π –¥–∞—Ç—ã —Å—á–∏—Ç–∞—Ç—å) –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2015"
    )
    await state.set_state(PrayerCalculationStates.waiting_for_start_date)

@router.message(PrayerCalculationStates.waiting_for_start_date)
async def process_start_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã"""
    start_date = parse_date(message.text)
    if not start_date:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì")
        return
    
    await state.update_data(start_date=start_date)
    
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É (–ø–æ –∫–∞–∫—É—é –¥–∞—Ç—É —Å—á–∏—Ç–∞—Ç—å) –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.06.2020"
    )
    await state.set_state(PrayerCalculationStates.waiting_for_end_date)

@router.message(PrayerCalculationStates.waiting_for_end_date)
async def process_end_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã"""
    end_date = parse_date(message.text)
    if not end_date:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì")
        return
    
    data = await state.get_data()
    start_date = data['start_date']
    
    if end_date <= start_date:
        await message.answer("‚ùå –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã.")
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–º–∞–∑—ã
    prayers_data = calculation_service.calculate_prayers_between_dates(start_date, end_date)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await prayer_service.set_user_prayers(message.from_user.id, prayers_data)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    total_prayers = sum(prayers_data.values())
    days_count = (end_date - start_date).days
    
    result_text = (
        f"‚úÖ –†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        f"üìä –ü–µ—Ä–∏–æ–¥: —Å {format_date(start_date)} –ø–æ {format_date(end_date)}\n"
        f"üìÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: {days_count}\n\n"
        f"üìù **–í—Å–µ–≥–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–º–∞–∑–æ–≤: {total_prayers}**\n\n"
        "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:\n"
    )
    
    for prayer_type, count in prayers_data.items():
        if count > 0:
            prayer_name = config.PRAYER_TYPES[prayer_type]
            result_text += f"‚Ä¢ {prayer_name}: {count}\n"
    
    result_text += "\nü§≤ –ü—É—Å—Ç—å –ê–ª–ª–∞—Ö –æ–±–ª–µ–≥—á–∏—Ç –≤–∞–º –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–µ!"
    
    await message.answer(result_text, reply_markup=get_main_menu_keyboard(), parse_mode="Markdown")
    await state.clear()

@router.callback_query(PrayerCalculationStates.choosing_method, F.data == "calc_manual")
async def calc_manual(callback: CallbackQuery, state: FSMContext):
    """–†—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–º–∞–∑–æ–≤"""
    await state.update_data(manual_prayers={})
    
    from ...keyboards.user.prayer_calc import get_prayer_type_selection_keyboard
    
    await callback.message.edit_text(
        "‚úã **–†—É—á–Ω–æ–π –≤–≤–æ–¥ –Ω–∞–º–∞–∑–æ–≤**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–º–∞–∑–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö.",
        reply_markup=get_prayer_type_selection_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(PrayerCalculationStates.waiting_for_prayer_type_selection)

# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç...


@router.callback_query(PrayerCalculationStates.waiting_for_prayer_type_selection, F.data.startswith("select_prayer_"))
async def process_prayer_type_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –Ω–∞–º–∞–∑–∞"""
    prayer_type = callback.data.replace("select_prayer_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –Ω–∞–º–∞–∑–∞
    await state.update_data(current_prayer_type=prayer_type)
    
    from ....core.config import config
    prayer_name = config.PRAYER_TYPES[prayer_type]
    
    await callback.message.edit_text(
        f"üïå **{prayer_name}**\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–º–∞–∑–æ–≤ —Ç–∏–ø–∞ '{prayer_name}':\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 50"
    )
    await state.set_state(PrayerCalculationStates.waiting_for_manual_prayer_count)

@router.message(PrayerCalculationStates.waiting_for_manual_prayer_count)
async def process_manual_prayer_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–º–∞–∑–æ–≤"""
    try:
        count = int(message.text)
        if count < 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            return
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    
    data = await state.get_data()
    prayer_type = data['current_prayer_type']
    manual_prayers = data.get('manual_prayers', {})
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    manual_prayers[prayer_type] = count
    await state.update_data(manual_prayers=manual_prayers)
    
    from ....core.config import config
    from ...keyboards.user.prayer_calc import get_prayer_type_selection_keyboard
    
    prayer_name = config.PRAYER_TYPES[prayer_type]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É
    current_text = "‚úã **–†—É—á–Ω–æ–π –≤–≤–æ–¥ –Ω–∞–º–∞–∑–æ–≤**\n\n"
    current_text += "‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ:\n"
    
    for p_type, p_count in manual_prayers.items():
        p_name = config.PRAYER_TYPES[p_type]
        current_text += f"‚Ä¢ {p_name}: {p_count}\n"
    
    current_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–ø –Ω–∞–º–∞–∑–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤–≤–æ–¥:"
    
    await message.answer(
        current_text,
        reply_markup=get_prayer_type_selection_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(PrayerCalculationStates.waiting_for_prayer_type_selection)

@router.callback_query(PrayerCalculationStates.waiting_for_prayer_type_selection, F.data == "finish_manual_input")
async def finish_manual_input(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞"""
    data = await state.get_data()
    manual_prayers = data.get('manual_prayers', {})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–∞–º–∞–∑
    total_prayers = sum(manual_prayers.values())
    if total_prayers == 0:
        await callback.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–∞–º–∞–∑", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await prayer_service.set_user_prayers(callback.from_user.id, manual_prayers)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_text = (
        f"‚úÖ –†—É—á–Ω–æ–π –≤–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        f"üìù **–í—Å–µ–≥–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–º–∞–∑–æ–≤: {total_prayers}**\n\n"
        "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:\n"
    )
    
    for prayer_type, count in manual_prayers.items():
        if count > 0:
            prayer_name = config.PRAYER_TYPES[prayer_type]
            result_text += f"‚Ä¢ {prayer_name}: {count}\n"
    
    result_text += "\nü§≤ –ü—É—Å—Ç—å –ê–ª–ª–∞—Ö –æ–±–ª–µ–≥—á–∏—Ç –≤–∞–º –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–µ!"
    
    await callback.message.edit_text(result_text, parse_mode="Markdown")
    await callback.message.answer(
        "üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_menu_keyboard()
    )
    await state.clear()

@router.callback_query(PrayerCalculationStates.choosing_method, F.data == "calc_custom_adult")
async def calc_custom_adult_dates(callback: CallbackQuery, state: FSMContext):
    """–†–∞—Å—á–µ—Ç —Å –∑–∞–¥–∞–Ω–∏–µ–º –¥–∞—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è"""
    await callback.message.edit_text(
        "üìÖ –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω—É—é –¥–∞—Ç—É —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è (–∫–æ–≥–¥–∞ —Å—Ç–∞–ª–∏ –æ–±—è–∑–∞–Ω—ã —Å–æ–≤–µ—Ä—à–∞—Ç—å –Ω–∞–º–∞–∑—ã) –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.2005"
    )
    await state.set_state(PrayerCalculationStates.waiting_for_adult_date)

@router.message(PrayerCalculationStates.waiting_for_adult_date)
async def process_adult_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è"""
    adult_date = parse_date(message.text)
    if not adult_date:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì")
        return
    
    await state.update_data(adult_date=adult_date)
    
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –≤—ã –Ω–∞—á–∞–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ —Å–æ–≤–µ—Ä—à–∞—Ç—å 5 –Ω–∞–º–∞–∑–æ–≤ –≤ –¥–µ–Ω—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2020"
    )
    await state.set_state(PrayerCalculationStates.waiting_for_prayer_start_from_adult)

@router.message(PrayerCalculationStates.waiting_for_prayer_start_from_adult)
async def process_prayer_start_from_adult(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –Ω–∞–º–∞–∑–æ–≤ –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—ã —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è"""
    prayer_start_date = parse_date(message.text)
    if not prayer_start_date:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì")
        return
    
    data = await state.get_data()
    adult_date = data['adult_date']
    
    if prayer_start_date <= adult_date:
        await message.answer("‚ùå –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–∞–º–∞–∑–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è.")
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–º–∞–∑—ã
    prayers_data = calculation_service.calculate_prayers_from_dates(adult_date, prayer_start_date)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await prayer_service.set_user_prayers(message.from_user.id, prayers_data)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    total_prayers = sum(prayers_data.values())
    days_count = (prayer_start_date - adult_date).days
    
    result_text = (
        f"‚úÖ –†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        f"üìä –ü–µ—Ä–∏–æ–¥: —Å {format_date(adult_date)} –ø–æ {format_date(prayer_start_date)}\n"
        f"üìÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: {days_count}\n\n"
        f"üìù **–í—Å–µ–≥–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–º–∞–∑–æ–≤: {total_prayers}**\n\n"
        "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:\n"
    )
    
    for prayer_type, count in prayers_data.items():
        if count > 0:
            prayer_name = config.PRAYER_TYPES[prayer_type]
            result_text += f"‚Ä¢ {prayer_name}: {count}\n"
    
    result_text += "\nü§≤ –ü—É—Å—Ç—å –ê–ª–ª–∞—Ö –æ–±–ª–µ–≥—á–∏—Ç –≤–∞–º –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–µ!"
    
    await message.answer(result_text, reply_markup=get_main_menu_keyboard(), parse_mode="Markdown")
    await state.clear()