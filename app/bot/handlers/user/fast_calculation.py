from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from datetime import date

from ...keyboards.user.fast_calc import get_fast_calculation_method_keyboard, get_fast_type_selection_keyboard
from ...keyboards.user.main_menu import get_main_menu_keyboard
from ....core.services.calculation_service import CalculationService
from ....core.services.fast_service import FastService
from ....core.services.user_service import UserService
from ....core.config import config
from ...states.fast_calculation import FastCalculationStates
from ...utils.date_utils import parse_date, format_date

router = Router()
calculation_service = CalculationService()
fast_service = FastService()
user_service = UserService()

@router.message(F.text == "ü•ó –†–∞—Å—á–µ—Ç –ø–æ—Å—Ç–æ–≤")
async def start_fast_calculation(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ—Å—Ç–æ–≤"""
    await state.clear()
    
    await message.answer(
        "ü•ó –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤:",
        reply_markup=get_fast_calculation_method_keyboard()
    )
    await state.set_state(FastCalculationStates.choosing_method)

@router.callback_query(FastCalculationStates.choosing_method, F.data == "fast_calc_from_age")
async def fast_calc_from_age(callback: CallbackQuery, state: FSMContext):
    """–†–∞—Å—á–µ—Ç –ø–æ—Å—Ç–æ–≤ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è"""
    await callback.message.edit_text(
        "üìÖ –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç –ø–æ—Å—Ç—ã –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è –¥–æ –¥–∞—Ç—ã, –∫–æ–≥–¥–∞ –≤—ã –Ω–∞—á–∞–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø–æ—Å—Ç–∏—Ç—å—Å—è.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –≤—ã –Ω–∞—á–∞–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ —Å–æ–±–ª—é–¥–∞—Ç—å –ø–æ—Å—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2020"
    )
    await state.set_state(FastCalculationStates.waiting_for_fast_start_date)

@router.message(FastCalculationStates.waiting_for_fast_start_date)
async def process_fast_start_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤"""
    fast_start_date = parse_date(message.text)
    if not fast_start_date:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await user_service.get_or_create_user(message.from_user.id)
    if not user.birth_date:
        await message.answer("‚ùå –î–ª—è —ç—Ç–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω—É–∂–Ω–∞ –≤–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–Ω–∞—á–∞–ª–∞.")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è
    adult_age = config.ADULT_AGE_FEMALE if user.gender == 'female' else config.ADULT_AGE_MALE
    adult_date = user.birth_date.replace(year=user.birth_date.year + adult_age)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç—ã
    fast_count = calculation_service.calculate_fasts_between_dates(adult_date, fast_start_date)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Ç–æ–ª—å–∫–æ –†–∞–º–∞–¥–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    fasts_data = {'ramadan': fast_count}
    await fast_service.set_user_fasts(message.from_user.id, fasts_data)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_text = (
        f"‚úÖ –†–∞—Å—á–µ—Ç –ø–æ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        f"üìä –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ –ø–æ—Å—Ç–æ–≤ –æ—Ç {adult_age} –ª–µ—Ç –¥–æ {format_date(fast_start_date)}:\n\n"
        f"ü•ó **–í—Å–µ–≥–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –†–∞–º–∞–¥–∞–Ω–∞: {fast_count}**\n\n"
        "ü§≤ –ü—É—Å—Ç—å –ê–ª–ª–∞—Ö –æ–±–ª–µ–≥—á–∏—Ç –≤–∞–º –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–µ!"
    )
    
    await message.answer(result_text, reply_markup=get_main_menu_keyboard(), parse_mode="Markdown")
    await state.clear()

@router.callback_query(FastCalculationStates.choosing_method, F.data == "fast_calc_between_dates")
async def fast_calc_between_dates(callback: CallbackQuery, state: FSMContext):
    """–†–∞—Å—á–µ—Ç –ø–æ—Å—Ç–æ–≤ –º–µ–∂–¥—É –¥–≤—É–º—è –¥–∞—Ç–∞–º–∏"""
    await callback.message.edit_text(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É (—Å –∫–∞–∫–æ–π –¥–∞—Ç—ã —Å—á–∏—Ç–∞—Ç—å –ø–æ—Å—Ç—ã) –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2015"
    )
    await state.set_state(FastCalculationStates.waiting_for_start_date)

@router.message(FastCalculationStates.waiting_for_start_date)
async def process_fast_start_date_between(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –¥–ª—è –ø–æ—Å—Ç–æ–≤"""
    start_date = parse_date(message.text)
    if not start_date:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì")
        return
    
    await state.update_data(start_date=start_date)
    
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É (–ø–æ –∫–∞–∫—É—é –¥–∞—Ç—É —Å—á–∏—Ç–∞—Ç—å –ø–æ—Å—Ç—ã) –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.06.2020"
    )
    await state.set_state(FastCalculationStates.waiting_for_end_date)

@router.message(FastCalculationStates.waiting_for_end_date)
async def process_fast_end_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã –¥–ª—è –ø–æ—Å—Ç–æ–≤"""
    end_date = parse_date(message.text)
    if not end_date:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì")
        return
    
    data = await state.get_data()
    start_date = data['start_date']
    
    if end_date <= start_date:
        await message.answer("‚ùå –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã.")
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç—ã
    fast_count = calculation_service.calculate_fasts_between_dates(start_date, end_date)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    fasts_data = {'ramadan': fast_count}
    await fast_service.set_user_fasts(message.from_user.id, fasts_data)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    years_diff = end_date.year - start_date.year
    result_text = (
        f"‚úÖ –†–∞—Å—á–µ—Ç –ø–æ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        f"üìä –ü–µ—Ä–∏–æ–¥: —Å {format_date(start_date)} –ø–æ {format_date(end_date)}\n"
        f"üìÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç: {years_diff}\n\n"
        f"ü•ó **–í—Å–µ–≥–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –†–∞–º–∞–¥–∞–Ω–∞: {fast_count}**\n\n"
        "ü§≤ –ü—É—Å—Ç—å –ê–ª–ª–∞—Ö –æ–±–ª–µ–≥—á–∏—Ç –≤–∞–º –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–µ!"
    )
    
    await message.answer(result_text, reply_markup=get_main_menu_keyboard(), parse_mode="Markdown")
    await state.clear()

@router.callback_query(FastCalculationStates.choosing_method, F.data == "fast_calc_manual")
async def fast_calc_manual(callback: CallbackQuery, state: FSMContext):
    """–†—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤"""
    await state.update_data(manual_fasts={})
    
    await callback.message.edit_text(
        "‚úã **–†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–æ—Å—Ç–æ–≤**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ—Å—Ç–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö.",
        reply_markup=get_fast_type_selection_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(FastCalculationStates.waiting_for_fast_type_selection)

@router.callback_query(FastCalculationStates.waiting_for_fast_type_selection, F.data.startswith("select_fast_"))
async def process_fast_type_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞"""
    fast_type = callback.data.replace("select_fast_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –ø–æ—Å—Ç–∞
    await state.update_data(current_fast_type=fast_type)
    
    fast_name = config.FAST_TYPES[fast_type]
    
    await callback.message.edit_text(
        f"ü•ó **{fast_name}**\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ —Ç–∏–ø–∞ '{fast_name}':\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 50"
    )
    await state.set_state(FastCalculationStates.waiting_for_manual_fast_count)

@router.message(FastCalculationStates.waiting_for_manual_fast_count)
async def process_manual_fast_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤"""
    try:
        count = int(message.text)
        if count < 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            return
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    
    data = await state.get_data()
    fast_type = data['current_fast_type']
    manual_fasts = data.get('manual_fasts', {})
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    manual_fasts[fast_type] = count
    await state.update_data(manual_fasts=manual_fasts)
    
    fast_name = config.FAST_TYPES[fast_type]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É
    current_text = "‚úã **–†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–æ—Å—Ç–æ–≤**\n\n"
    current_text += "‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ:\n"
    
    for f_type, f_count in manual_fasts.items():
        f_name = config.FAST_TYPES[f_type]
        current_text += f"‚Ä¢ {f_name}: {f_count}\n"
    
    current_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–ø –ø–æ—Å—Ç–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤–≤–æ–¥:"
    
    await message.answer(
        current_text,
        reply_markup=get_fast_type_selection_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(FastCalculationStates.waiting_for_fast_type_selection)

@router.callback_query(FastCalculationStates.waiting_for_fast_type_selection, F.data == "finish_manual_fast_input")
async def finish_manual_fast_input(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ—Å—Ç–æ–≤"""
    data = await state.get_data()
    manual_fasts = data.get('manual_fasts', {})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ—Å—Ç
    total_fasts = sum(manual_fasts.values())
    if total_fasts == 0:
        await callback.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ—Å—Ç", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await fast_service.set_user_fasts(callback.from_user.id, manual_fasts)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_text = (
        f"‚úÖ –†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–æ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        f"ü•ó **–í—Å–µ–≥–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {total_fasts}**\n\n"
        "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:\n"
    )
    
    for fast_type, count in manual_fasts.items():
        if count > 0:
            fast_name = config.FAST_TYPES[fast_type]
            result_text += f"‚Ä¢ {fast_name}: {count}\n"
    
    result_text += "\nü§≤ –ü—É—Å—Ç—å –ê–ª–ª–∞—Ö –æ–±–ª–µ–≥—á–∏—Ç –≤–∞–º –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–µ!"
    
    await callback.message.edit_text(result_text, parse_mode="Markdown")
    await callback.message.answer(
        "üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_menu_keyboard()
    )
    await state.clear()