from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from datetime import date, datetime
import logging

from ...keyboards.user.fast_calc import get_fast_calculation_method_keyboard
from ...keyboards.user.main_menu import get_main_menu_keyboard
from ....core.services.fast_service import FastService
from ....core.services.enhanced_calculation_service import EnhancedCalculationService
from ....core.database.repositories.female_periods_repository import FemalePeriodsRepository
from ....core.database.repositories.user_repository import UserRepository
from ....core.config import config
from ...states.female_periods import FastCalculationStates
from ...utils.date_utils import parse_date, format_date

logger = logging.getLogger(__name__)
router = Router()

fast_service = FastService()
calc_service = EnhancedCalculationService()
periods_repo = FemalePeriodsRepository()
user_repo = UserRepository()

@router.message(F.text == "üìø –†–∞—Å—á–µ—Ç –ø–æ—Å—Ç–æ–≤")
async def start_fast_calculation(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ—Å—Ç–æ–≤"""
    await state.clear()
    
    await message.answer(
        "üìø **–†–∞—Å—á–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–∞—Å—á–µ—Ç–∞:",
        reply_markup=get_fast_calculation_method_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(FastCalculationStates.choosing_method)

@router.callback_query(FastCalculationStates.choosing_method, F.data == "fast_calc_from_age")
async def calc_fast_from_age(callback: CallbackQuery, state: FSMContext):
    """–†–∞—Å—á–µ—Ç –ø–æ—Å—Ç–æ–≤ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è"""
    user = await user_repo.get_user_by_telegram_id(callback.from_user.id)
    
    if not user.birth_date:
        await callback.message.edit_text(
            "‚ùå –î–ª—è —ç—Ç–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω—É–∂–Ω–∞ –≤–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –µ–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è."
        )
        return
    
    await callback.message.edit_text(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –≤—ã –Ω–∞—á–∞–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –¥–µ—Ä–∂–∞—Ç—å –ø–æ—Å—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2020"
    )
    await state.set_state(FastCalculationStates.waiting_for_fasting_start_date)

@router.message(FastCalculationStates.waiting_for_fasting_start_date)
async def process_fasting_start_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç–æ–≤"""
    fasting_start_date = parse_date(message.text)
    
    if not fasting_start_date:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì")
        return
    
    user = await user_repo.get_user_by_telegram_id(message.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è –ø–æ –ø–æ–ª—É
    adult_age = calc_service.get_adult_age_by_gender(user.gender)
    adult_date = user.birth_date.replace(year=user.birth_date.year + adult_age)
    
    if fasting_start_date <= adult_date:
        await message.answer(
            f"‚ùå –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ—Å–ª–µ –¥–∞—Ç—ã —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è "
            f"({format_date(adult_date)})"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–µ–Ω—Å–∫–∏—Ö –ø–µ—Ä–∏–æ–¥–∞—Ö, –µ—Å–ª–∏ —ç—Ç–æ –∂–µ–Ω—â–∏–Ω–∞
    hayd_info_list = []
    nifas_info_list = []
    
    if user.gender == 'female':
        hayd_info_list = await periods_repo.get_all_hayd_info(message.from_user.id)
        nifas_info_list = await periods_repo.get_all_nifas_info(message.from_user.id)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç—ã
    fasts_data = calc_service.calculate_fasts_with_female_periods(
        start_date=adult_date,
        end_date=fasting_start_date,
        gender=user.gender,
        hayd_info_list=hayd_info_list,
        nifas_info_list=nifas_info_list
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await fast_service.set_user_fasts(message.from_user.id, fasts_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç–æ–≤
    await user_repo.update_user(
        telegram_id=message.from_user.id,
        fasting_start_date=fasting_start_date
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    total_fasts = sum(fasts_data.values())
    result_text = (
        f"‚úÖ **–†–∞—Å—á–µ—Ç –ø–æ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
        f"üìä –ü–µ—Ä–∏–æ–¥: —Å {format_date(adult_date)} –ø–æ {format_date(fasting_start_date)}\n"
    )
    
    if user.gender == 'female' and (hayd_info_list or nifas_info_list):
        result_text += "üìç –£—á—Ç–µ–Ω—ã –∂–µ–Ω—Å–∫–∏–µ –ø–µ—Ä–∏–æ–¥—ã (—Ö–∞–π–¥ –∏ –Ω–∏—Ñ–∞—Å)\n"
    
    result_text += f"\nüìù **–í—Å–µ–≥–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {total_fasts}**\n\n"
    
    if fasts_data:
        result_text += "**–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –≥–æ–¥–∞–º:**\n"
        for fast_key, count in sorted(fasts_data.items()):
            if count > 0:
                if "ramadan" in fast_key:
                    year = fast_key.split("_")[1]
                    result_text += f"‚Ä¢ –†–∞–º–∞–¥–∞–Ω {year}: {count} –¥–Ω–µ–π\n"
                else:
                    result_text += f"‚Ä¢ {fast_key}: {count} –¥–Ω–µ–π\n"
    
    result_text += "\nü§≤ –ü—É—Å—Ç—å –ê–ª–ª–∞—Ö –æ–±–ª–µ–≥—á–∏—Ç –≤–∞–º –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤!"
    
    await message.answer(
        result_text,
        reply_markup=get_main_menu_keyboard(),
        parse_mode="Markdown"
    )
    await state.clear()

@router.callback_query(FastCalculationStates.choosing_method, F.data == "fast_calc_manual")
async def calc_fast_manual(callback: CallbackQuery, state: FSMContext):
    """–†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–æ—Å—Ç–æ–≤"""
    await callback.message.edit_text(
        "üìù **–†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥—ã, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –ø–æ—Å—Ç—ã –†–∞–º–∞–¥–∞–Ω–∞, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 2018, 2019, 2020\n\n"
        "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–ª–∏ –ø–æ—Å—Ç—ã –†–∞–º–∞–¥–∞–Ω–∞.",
        parse_mode="Markdown"
    )
    await state.set_state(FastCalculationStates.entering_ramadan_years)

@router.message(FastCalculationStates.entering_ramadan_years)
async def process_ramadan_years(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–¥–æ–≤ –†–∞–º–∞–¥–∞–Ω–∞"""
    
    if message.text.strip() == "0":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–ª –ø–æ—Å—Ç—ã
        await message.answer(
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –†–∞–º–∞–¥–∞–Ω–∞.\n\n"
            "ü§≤ –ú–∞—à–∞–∞ –õ–ª–∞—Ö!",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –≥–æ–¥—ã
        years_str = message.text.replace(" ", "").split(",")
        years = []
        
        for year_str in years_str:
            year = int(year_str.strip())
            if year < 1950 or year > date.today().year:
                await message.answer(
                    f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥: {year}. "
                    f"–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥—ã –æ—Ç 1950 –¥–æ {date.today().year}"
                )
                return
            years.append(year)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–∞—Ö
        fasts_data = {}
        user = await user_repo.get_user_by_telegram_id(message.from_user.id)
        
        for year in years:
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º 30 –¥–Ω–µ–π –†–∞–º–∞–¥–∞–Ω–∞
            # –ï—Å–ª–∏ –∂–µ–Ω—â–∏–Ω–∞, –Ω—É–∂–Ω–æ —É—á–µ—Å—Ç—å –ø–µ—Ä–∏–æ–¥—ã
            if user.gender == 'female':
                # –£–ø—Ä–æ—â–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º 30 –¥–Ω–µ–π
                # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –≤—ã—á–µ—Å—Ç—å –¥–Ω–∏ —Ö–∞–π–¥ –≤ –†–∞–º–∞–¥–∞–Ω–µ
                fasts_data[f"ramadan_{year}"] = 30
            else:
                fasts_data[f"ramadan_{year}"] = 30
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await fast_service.set_user_fasts(message.from_user.id, fasts_data)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        total_fasts = sum(fasts_data.values())
        result_text = (
            f"‚úÖ **–ü–æ—Å—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!**\n\n"
            f"üìù **–í—Å–µ–≥–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {total_fasts}**\n\n"
            "**–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:**\n"
        )
        
        for year in sorted(years):
            result_text += f"‚Ä¢ –†–∞–º–∞–¥–∞–Ω {year}: 30 –¥–Ω–µ–π\n"
        
        if user.gender == 'female':
            result_text += (
                "\nüìç *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –¥–ª—è –∂–µ–Ω—â–∏–Ω:*\n"
                "–ü–æ—Å—Ç—ã, –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º—è —Ö–∞–π–¥ –∏–ª–∏ –Ω–∏—Ñ–∞—Å –≤ –†–∞–º–∞–¥–∞–Ω–µ, "
                "–Ω—É–∂–Ω–æ –≤–æ—Å–ø–æ–ª–Ω–∏—Ç—å 1:1 (–æ–¥–∏–Ω –¥–µ–Ω—å –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å)."
            )
        
        result_text += "\n\nü§≤ –ü—É—Å—Ç—å –ê–ª–ª–∞—Ö –æ–±–ª–µ–≥—á–∏—Ç –≤–∞–º –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–µ!"
        
        await message.answer(
            result_text,
            reply_markup=get_main_menu_keyboard(),
            parse_mode="Markdown"
        )
        await state.clear()
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 2018, 2019, 2020"
        )