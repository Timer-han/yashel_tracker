from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup
from aiogram.filters import Command
from datetime import datetime, date

from ....core.services.prayer_service import PrayerService
from ....core.services.user_service import UserService
from ....core.services.calculation_service import CalculationService
from ....core.config import config, escape_markdown
from ...keyboards.user.statistics import get_statistics_keyboard

router = Router()
prayer_service = PrayerService()
user_service = UserService()
calc_service = CalculationService()

# =======
#  UTILS
# =======

async def _generate_statistics_text(user_id: int) -> tuple[str, InlineKeyboardMarkup]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    stats = await prayer_service.get_user_statistics(user_id)
    user = await user_service.get_or_create_user(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–∞—Ö
    fasting_missed = user.fasting_missed_days or 0
    fasting_completed = user.fasting_completed_days or 0
    fasting_remaining = max(0, fasting_missed - fasting_completed)
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∏ –æ –Ω–∞–º–∞–∑–∞—Ö, –Ω–∏ –æ –ø–æ—Å—Ç–∞—Ö
    if stats['total_missed'] == 0 and fasting_missed == 0:
        return (
            "üìä *–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
            "üì≠ –î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç\n\n"
            "‚Ä¢ üî¢ –†–∞—Å—á–µ—Ç –Ω–∞–º–∞–∑–æ–≤\n"
            "‚Ä¢ üìø –ü–æ—Å—Ç—ã",
            None
        )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats_text = "üìä *–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
    
    # –ù–∞–º–∞–∑—ã
    if stats['total_missed'] > 0:
        prayer_progress = (stats['total_completed'] / stats['total_missed']) * 100 if stats['total_missed'] > 0 else 0
        progress_bar = "‚ñì" * int(prayer_progress / 10) + "‚ñë" * (10 - int(prayer_progress / 10))
        
        stats_text += (
            f"üïå *–ù–∞–º–∞–∑—ã:* {stats['total_completed']}/{stats['total_missed']}\n"
            f"üìä [{progress_bar}] {prayer_progress:.0f}%\n"
            f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: *{stats['total_remaining']}*\n\n"
        )
    
    # –ü–æ—Å—Ç—ã
    if fasting_missed > 0:
        fasting_progress = (fasting_completed / fasting_missed) * 100 if fasting_missed > 0 else 0
        progress_bar = "‚ñì" * int(fasting_progress / 10) + "‚ñë" * (10 - int(fasting_progress / 10))
        
        stats_text += (
            f"üìø *–ü–æ—Å—Ç—ã:* {fasting_completed}/{fasting_missed} –¥–Ω–µ–π\n"
            f"üìä [{progress_bar}] {fasting_progress:.0f}%\n"
            f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: *{fasting_remaining}* –¥–Ω–µ–π\n\n"
        )
    
    # –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è
    total_items = stats['total_missed'] + fasting_missed
    total_completed = stats['total_completed'] + fasting_completed
    
    if total_items > 0:
        overall_progress = (total_completed / total_items) * 100
        
        if overall_progress >= 80:
            motivation = "üéØ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –±–ª–∏–∑–æ–∫ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é!"
        elif overall_progress >= 50:
            motivation = "üí™ –•–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
        elif overall_progress >= 25:
            motivation = "üìà –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏!"
        else:
            motivation = "üå± –ö–∞–∂–¥—ã–π —à–∞–≥ –≤–∞–∂–µ–Ω. –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è!"
        
        stats_text += f"{motivation}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ñ—Ä–∞–∑—É
    stats_text += "ü§≤ *–î–∞ –ø–æ–º–æ–∂–µ—Ç –ê–ª–ª–∞—Ö –≤ –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–∏!*"
    
    stats_text = escape_markdown(stats_text, ".!?()-[]")
    return stats_text, get_statistics_keyboard()


@router.message(F.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
@router.message(Command("stats"))
async def show_user_statistics(message: Message):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    text, keyboard = await _generate_statistics_text(message.from_user.id)
    await message.answer(text, parse_mode="MarkdownV2", reply_markup=keyboard)


@router.callback_query(F.data == "show_history")
async def show_prayer_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    from ....core.database.repositories.prayer_history_repository import PrayerHistoryRepository
    history_repo = PrayerHistoryRepository()
    
    history = await history_repo.get_user_history(callback.from_user.id, limit=10)
    
    if not history:
        await callback.answer("üìù –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—É—Å—Ç–∞", show_alert=True)
        return
    
    history_text = "üìã *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n\n"
    
    for record in history:
        prayer_name = config.PRAYER_TYPES.get(record.prayer_type, record.prayer_type)
        action_emoji = {
            'add': '‚ûï',
            'remove': '‚ûñ', 
            'set': 'üìù',
            'reset': 'üîÑ',
            'add_missed': '‚¨ÜÔ∏è'
        }.get(record.action, '‚Ä¢')
        
        history_text += (
            f"{action_emoji} {prayer_name} "
            f"({record.previous_value} ‚Üí {record.new_value})\n"
        )
    history_text = escape_markdown(history_text, "().!?-[]")
    await callback.message.answer(history_text, parse_mode="MarkdownV2")

@router.callback_query(F.data == "detailed_breakdown")
async def show_detailed_breakdown(callback: CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ –Ω–∞–º–∞–∑–∞–º –∏ –ø–æ—Å—Ç–∞–º"""
    prayers = await prayer_service.get_user_prayers(callback.from_user.id)
    user = await user_service.get_or_create_user(callback.from_user.id)
    
    breakdown_text = "üîç *–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
    
    # –ù–∞–º–∞–∑—ã –ø–æ —Ç–∏–ø–∞–º
    if prayers:
        breakdown_text += "üïå *–ù–∞–º–∞–∑—ã –ø–æ —Ç–∏–ø–∞–º:*\n"
        
        # –û–±—ã—á–Ω—ã–µ –Ω–∞–º–∞–∑—ã
        regular_prayers = [p for p in prayers if not p.prayer_type.endswith('_safar')]
        if regular_prayers:
            for prayer in regular_prayers:
                if prayer.total_missed > 0:
                    prayer_name = config.PRAYER_TYPES[prayer.prayer_type]
                    progress = (prayer.completed / prayer.total_missed) * 100
                    breakdown_text += (
                        f"‚Ä¢ {prayer_name}: {prayer.completed}/{prayer.total_missed} "
                        f"({progress:.0f}%)\n"
                    )
        
        # –°–∞—Ñ–∞—Ä –Ω–∞–º–∞–∑—ã
        safar_prayers = [p for p in prayers if p.prayer_type.endswith('_safar')]
        if safar_prayers and any(p.total_missed > 0 for p in safar_prayers):
            breakdown_text += "\n‚úàÔ∏è *–°–∞—Ñ–∞—Ä –Ω–∞–º–∞–∑—ã:*\n"
            for prayer in safar_prayers:
                if prayer.total_missed > 0:
                    prayer_name = config.PRAYER_TYPES[prayer.prayer_type]
                    progress = (prayer.completed / prayer.total_missed) * 100
                    breakdown_text += (
                        f"‚Ä¢ {prayer_name}: {prayer.completed}/{prayer.total_missed} "
                        f"({progress:.0f}%)\n"
                    )
        
        breakdown_text += "\n"
    
    # –ü–æ—Å—Ç—ã
    fasting_missed = user.fasting_missed_days or 0
    fasting_completed = user.fasting_completed_days or 0
    
    if fasting_missed > 0:
        fasting_progress = (fasting_completed / fasting_missed) * 100
        breakdown_text += (
            f"üìø *–ü–æ—Å—Ç—ã –†–∞–º–∞–¥–∞–Ω–∞:*\n"
            f"‚Ä¢ –í–æ—Å–ø–æ–ª–Ω–µ–Ω–æ: {fasting_completed}/{fasting_missed} –¥–Ω–µ–π ({fasting_progress:.0f}%)\n"
        )
        
        # if user.gender == 'female' and user.hayd_average_days:
        #     breakdown_text += f"‚Ä¢ –£—á—Ç–µ–Ω —Ö–∞–π–¥: {user.hayd_average_days} –¥–Ω–µ–π/–º–µ—Å—è—Ü\n"
        #     if user.childbirth_count > 0:
        #         breakdown_text += f"‚Ä¢ –£—á—Ç–µ–Ω–æ —Ä–æ–¥–æ–≤: {user.childbirth_count}\n"
    
    breakdown_text = escape_markdown(breakdown_text, "().?![]-")
    await callback.message.answer(breakdown_text, parse_mode="MarkdownV2")

@router.callback_query(F.data == "refresh_stats")
async def refresh_statistics(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        text, keyboard = await _generate_statistics_text(callback.from_user.id)
        await callback.message.edit_text(
            text, 
            parse_mode="MarkdownV2", 
            reply_markup=keyboard
        )
        await callback.answer("üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        if "message is not modified" in str(e):
            await callback.answer("üìä –î–∞–Ω–Ω—ã–µ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã", show_alert=False)
        else:
            # –õ–æ–≥–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)