from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from datetime import datetime, date

from ....core.services.prayer_service import PrayerService
from ....core.services.user_service import UserService
from ....core.services.calculation_service import CalculationService
from ....core.config import config
from ...keyboards.user.statistics import get_statistics_keyboard

router = Router()
prayer_service = PrayerService()
user_service = UserService()
calc_service = CalculationService()

@router.message(F.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
@router.message(Command("stats"))
async def show_user_statistics(message: Message):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    stats = await prayer_service.get_user_statistics(message.from_user.id)
    user = await user_service.get_or_create_user(message.from_user.id)
    
    if stats['total_missed'] == 0:
        await message.answer(
            "üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–º–∞–∑–∞—Ö.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ üî¢ –†–∞—Å—á–µ—Ç –Ω–∞–º–∞–∑–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
            parse_mode="Markdown"
        )
        return
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats_text = (
        "üìä **–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–º–∞–∑–æ–≤:**\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name or user.first_name}\n"
        f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {calc_service.calculate_age(user.birth_date) if user.birth_date else '–ù–µ —É–∫–∞–∑–∞–Ω'} –ª–µ—Ç\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {user.city or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        f"üìù **–í—Å–µ–≥–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ: {stats['total_missed']}**\n"
        f"‚úÖ **–í–æ—Å–ø–æ–ª–Ω–µ–Ω–æ: {stats['total_completed']}**\n"
        f"‚è≥ **–û—Å—Ç–∞–ª–æ—Å—å: {stats['total_remaining']}**\n\n"
    )
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å
    if stats['total_missed'] > 0:
        progress = (stats['total_completed'] / stats['total_missed']) * 100
        stats_text += f"üìà **–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%**\n\n"
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar = "‚ñì" * int(progress / 10) + "‚ñë" * (10 - int(progress / 10))
        stats_text += f"[{progress_bar}] {progress:.1f}%\n\n"
    
    # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤ –¥–µ–Ω—å
    if stats['total_completed'] > 0:
        # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—Å–ø–æ–ª–Ω—è–µ—Ç –Ω–∞–º–∞–∑—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        avg_per_day = stats['total_completed'] / 30 if stats['total_completed'] > 30 else stats['total_completed']
        stats_text += f"üìä –°—Ä–µ–¥–Ω–µ–µ –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–µ: ~{avg_per_day:.1f} –Ω–∞–º–∞–∑–æ–≤/–¥–µ–Ω—å\n\n"
        
        # –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if stats['total_remaining'] > 0 and avg_per_day > 0:
            days_to_complete = stats['total_remaining'] / avg_per_day
            if days_to_complete < 365:
                stats_text += f"‚è∞ –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ~{days_to_complete:.0f} –¥–Ω–µ–π\n\n"
    
    stats_text += "**üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –Ω–∞–º–∞–∑–∞–º:**\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –Ω–∞–º–∞–∑–æ–≤
    regular_prayers = {}
    safar_prayers = {}
    
    for prayer_name, data in stats['prayers'].items():
        if data['total'] > 0:
            if '—Å–∞—Ñ–∞—Ä' in prayer_name.lower():
                safar_prayers[prayer_name] = data
            else:
                regular_prayers[prayer_name] = data
    
    # –û–±—ã—á–Ω—ã–µ –Ω–∞–º–∞–∑—ã
    if regular_prayers:
        stats_text += "üïå **–û–±—ã—á–Ω—ã–µ –Ω–∞–º–∞–∑—ã:**\n"
        for prayer_name, data in regular_prayers.items():
            progress_pct = (data['completed'] / data['total']) * 100 if data['total'] > 0 else 0
            stats_text += (
                f"‚Ä¢ **{prayer_name}:** {data['completed']}/{data['total']} "
                f"({progress_pct:.1f}% - –æ—Å—Ç–∞–ª–æ—Å—å {data['remaining']})\n"
            )
        stats_text += "\n"
    
    # –°–∞—Ñ–∞—Ä –Ω–∞–º–∞–∑—ã
    if safar_prayers:
        stats_text += "‚úàÔ∏è **–°–∞—Ñ–∞—Ä –Ω–∞–º–∞–∑—ã:**\n"
        for prayer_name, data in safar_prayers.items():
            progress_pct = (data['completed'] / data['total']) * 100 if data['total'] > 0 else 0
            stats_text += (
                f"‚Ä¢ **{prayer_name}:** {data['completed']}/{data['total']} "
                f"({progress_pct:.1f}% - –æ—Å—Ç–∞–ª–æ—Å—å {data['remaining']})\n"
            )
        stats_text += "\n"
    
    # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if stats['total_remaining'] > 0:
        if progress >= 80:
            stats_text += "üéØ –í—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏! –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ—Å—å!"
        elif progress >= 50:
            stats_text += "üí™ –û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
        elif progress >= 25:
            stats_text += "üìà –•–æ—Ä–æ—à–µ–µ –Ω–∞—á–∞–ª–æ! –î–µ—Ä–∂–∏—Ç–µ —Ç–µ–º–ø!"
        else:
            stats_text += "üå± –ö–∞–∂–¥—ã–π –Ω–∞–º–∞–∑ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –∫ —Ü–µ–ª–∏. –ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ!"
        stats_text += "\n\nü§≤ –î–∞ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ê–ª–ª–∞—Ö –≤ –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ –Ω–∞–º–∞–∑–æ–≤!"
    else:
        stats_text += "üéâ **–ú–∞—à–∞–∞ –õ–ª–∞—Ö! –í—Å–µ –Ω–∞–º–∞–∑—ã –≤–æ—Å–ø–æ–ª–Ω–µ–Ω—ã!**\nü§≤ –î–∞ –ø—Ä–∏–º–µ—Ç –ê–ª–ª–∞—Ö –≤–∞—à–∏ —É—Å–∏–ª–∏—è!"
    
    await message.answer(
        stats_text, 
        parse_mode="Markdown",
        reply_markup=get_statistics_keyboard()
    )

@router.callback_query(F.data == "show_history")
async def show_prayer_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    from ....core.database.repositories.prayer_history_repository import PrayerHistoryRepository
    history_repo = PrayerHistoryRepository()
    
    history = await history_repo.get_user_history(callback.from_user.id, limit=10)
    
    if not history:
        await callback.answer("üìù –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—É—Å—Ç–∞", show_alert=True)
        return
    
    history_text = "üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–µ–π—Å—Ç–≤–∏–π:**\n\n"
    
    for record in history:
        prayer_name = config.PRAYER_TYPES.get(record.prayer_type, record.prayer_type)
        action_text = {
            'add': '‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ',
            'remove': '‚ûñ –£–±—Ä–∞–Ω–æ', 
            'set': 'üìù –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
            'reset': 'üîÑ –°–±—Ä–æ—Å'
        }.get(record.action, record.action)
        
        history_text += (
            f"‚Ä¢ {action_text}: {prayer_name} ({record.amount})\n"
            f"  {record.previous_value} ‚Üí {record.new_value}\n"
            f"  üìÖ {record.created_at.strftime('%d.%m %H:%M') if hasattr(record, 'created_at') else '–ù–µ–¥–∞–≤–Ω–æ'}\n\n"
        )
    
    await callback.message.answer(history_text, parse_mode="Markdown")

@router.callback_query(F.data == "detailed_breakdown")
async def show_detailed_breakdown(callback: CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ –Ω–∞–º–∞–∑–∞–º"""
    prayers = await prayer_service.get_user_prayers(callback.from_user.id)
    
    if not prayers:
        await callback.answer("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", show_alert=True)
        return
    
    breakdown_text = "üîç **–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –Ω–∞–º–∞–∑–∞–º:**\n\n"
    
    for prayer in prayers:
        if prayer.total_missed > 0:
            prayer_name = config.PRAYER_TYPES[prayer.prayer_type]
            progress = (prayer.completed / prayer.total_missed) * 100
            
            breakdown_text += f"üïå **{prayer_name}:**\n"
            breakdown_text += f"   üìù –í—Å–µ–≥–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ: {prayer.total_missed}\n"
            breakdown_text += f"   ‚úÖ –í–æ—Å–ø–æ–ª–Ω–µ–Ω–æ: {prayer.completed}\n"
            breakdown_text += f"   ‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {prayer.remaining}\n"
            breakdown_text += f"   üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%\n"
            
            # –ú–∏–Ω–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–º–∞–∑–∞
            mini_bar = "‚ñì" * int(progress / 20) + "‚ñë" * (5 - int(progress / 20))
            breakdown_text += f"   [{mini_bar}]\n\n"
    
    await callback.message.answer(breakdown_text, parse_mode="Markdown")

@router.callback_query(F.data == "refresh_stats")
async def refresh_statistics(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await show_user_statistics(callback.message)
    await callback.answer("üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")