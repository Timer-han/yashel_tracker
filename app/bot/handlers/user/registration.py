from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from datetime import datetime, date
import json

from ...keyboards.user.registration import get_gender_keyboard, get_confirmation_keyboard
from ...keyboards.user.main_menu import get_main_menu_keyboard, get_moderator_menu_keyboard, get_admin_menu_keyboard
from ....core.services.user_service import UserService
from ....core.config import config
from ...states.registration import RegistrationStates

import logging
logger = logging.getLogger(__name__)

router = Router()
user_service = UserService()

@router.message(RegistrationStates.waiting_for_gender)
async def process_gender(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    if message.text == "üë® –ú—É–∂—Å–∫–æ–π":
        gender = "male"
    elif message.text == "üë© –ñ–µ–Ω—Å–∫–∏–π":
        gender = "female"
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.")
        return
    
    await state.update_data(gender=gender)
    
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990",
        reply_markup=None
    )
    await state.set_state(RegistrationStates.waiting_for_birth_date)

@router.message(RegistrationStates.waiting_for_birth_date)
async def process_birth_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    try:
        birth_date = datetime.strptime(message.text, "%d.%m.%Y").date()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
        today = date.today()
        age = today.year - birth_date.year
        if age < 8 or age > 100:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.")
            return
        
        await state.update_data(birth_date=birth_date)
        
        await message.answer(
            "üèôÔ∏è –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ?\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –ö–∞–∑–∞–Ω—å, –ë–∞–∫—É"
        )
        await state.set_state(RegistrationStates.waiting_for_city)
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990"
        )

@router.message(RegistrationStates.waiting_for_city)
async def process_city(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞"""
    city = message.text.strip()
    await state.update_data(city=city)
    
    data = await state.get_data()
    
    # # –ï—Å–ª–∏ –∂–µ–Ω—â–∏–Ω–∞, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —Ö–∞–π–¥
    # if data.get('gender') == 'female':
    #     await message.answer(
    #         "üìä –î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–º–∞–∑–æ–≤ –∏ –ø–æ—Å—Ç–æ–≤ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.\n\n"
    #         "üåô –£–∫–∞–∂–∏—Ç–µ –¢–ï–ö–£–©–£–Æ —Å—Ä–µ–¥–Ω—é—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞ –≤ –¥–Ω—è—Ö (–æ—Ç 3 –¥–æ 10):\n"
    #         "–ù–∞–ø—Ä–∏–º–µ—Ä: 5\n\n"
    #         "üí° –≠—Ç–æ –≤–∞—à–∞ —Ç–µ–∫—É—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü–∏–∫–ª–∞"
    #     )
    #     await state.set_state(RegistrationStates.waiting_for_hayd_average)
    # else:
    #     # –î–ª—è –º—É–∂—á–∏–Ω —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    #     await show_confirmation(message, state)
    
    await show_confirmation(message, state)

@router.message(RegistrationStates.waiting_for_hayd_average)
async def process_hayd_average(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ö–∞–π–¥–∞"""
    try:
        hayd_days = float(message.text.strip())
        if hayd_days < config.HAYD_MIN_DAYS or hayd_days > config.HAYD_MAX_DAYS:
            await message.answer(f"‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {config.HAYD_MIN_DAYS} –¥–æ {config.HAYD_MAX_DAYS} –¥–Ω–µ–π.")
            return
        
        await state.update_data(hayd_average_days=hayd_days)
        
        await message.answer(
            "üë∂ –°–∫–æ–ª—å–∫–æ —É –≤–∞—Å –±—ã–ª–æ —Ä–æ–¥–æ–≤?\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (0 - –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ):"
        )
        await state.set_state(RegistrationStates.waiting_for_childbirth_count)
        
    except ValueError:
        await message.answer(f"‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {config.HAYD_MIN_DAYS} –¥–æ {config.HAYD_MAX_DAYS}.")

@router.message(RegistrationStates.waiting_for_childbirth_count)
async def process_childbirth_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–æ–¥–æ–≤"""
    try:
        count = int(message.text.strip())
        if count < 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            return
        
        await state.update_data(
            childbirth_count=count, 
            childbirth_data=[], 
            current_birth=1
        )
        
        if count > 0:
            data = await state.get_data()
            await message.answer(
                f"üìä –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞ –î–û 1-—Ö —Ä–æ–¥–æ–≤ (–¥–Ω–µ–π):\n"
                f"–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {data['hayd_average_days']} –¥–Ω–µ–π\n\n"
                "üí° –≠—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü–∏–∫–ª–∞ –¥–æ –ø–µ—Ä–≤—ã—Ö —Ä–æ–¥–æ–≤\n"
                "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0 –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è:"
            )
            await state.set_state(RegistrationStates.waiting_for_hayd_before_birth)
        else:
            await show_confirmation(message, state)
            
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@router.message(RegistrationStates.waiting_for_hayd_before_birth)
async def process_hayd_before_birth(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–∞–π–¥–∞ –¥–æ —Ä–æ–¥–æ–≤"""
    try:
        data = await state.get_data()
        hayd_before = float(message.text.strip())
        
        if hayd_before == 0:
            hayd_before = data['hayd_average_days']
        elif hayd_before < config.HAYD_MIN_DAYS or hayd_before > config.HAYD_MAX_DAYS:
            await message.answer(f"‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {config.HAYD_MIN_DAYS} –¥–æ {config.HAYD_MAX_DAYS} –¥–Ω–µ–π.")
            return
        
        await state.update_data(current_hayd_before=hayd_before)
        
        current_birth = data['current_birth']
        await message.answer(
            f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É {current_birth}-—Ö —Ä–æ–¥–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.2020"
        )
        await state.set_state(RegistrationStates.waiting_for_childbirth_date)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@router.message(RegistrationStates.waiting_for_childbirth_date)
async def process_childbirth_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–¥–æ–≤"""
    try:
        birth_date = datetime.strptime(message.text, "%d.%m.%Y").date()
        data = await state.get_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
        if birth_date > date.today():
            await message.answer("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.")
            return
        
        if data['birth_date'] and birth_date < data['birth_date']:
            await message.answer("‚ùå –î–∞—Ç–∞ —Ä–æ–¥–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è.")
            return
        
        await state.update_data(current_birth_date=birth_date)
        
        current_birth = data['current_birth']
        await message.answer(
            f"üåô –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∏—Ñ–∞—Å–∞ –ø–æ—Å–ª–µ {current_birth}-—Ö —Ä–æ–¥–æ–≤ (–¥–Ω–µ–π):\n"
            f"–ú–∞–∫—Å–∏–º—É–º: {config.NIFAS_MAX_DAYS} –¥–Ω–µ–π\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:"
        )
        await state.set_state(RegistrationStates.waiting_for_nifas_days)
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.2020"
        )

@router.message(RegistrationStates.waiting_for_nifas_days)
async def process_nifas_days(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∏—Ñ–∞—Å–∞"""
    try:
        nifas_days = int(message.text.strip())
        if nifas_days < 0 or nifas_days > config.NIFAS_MAX_DAYS:
            await message.answer(f"‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ {config.NIFAS_MAX_DAYS} –¥–Ω–µ–π.")
            return
        
        data = await state.get_data()
        childbirth_data = data['childbirth_data']
        current_birth = data['current_birth']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–∏—Ö —Ä–æ–¥–∞—Ö (–±–µ–∑ hayd_after!)
        birth_info = {
            'number': current_birth,
            'date': data['current_birth_date'].isoformat(),
            'nifas_days': nifas_days,
            'hayd_before': data['current_hayd_before']
        }
        
        childbirth_data.append(birth_info)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–∏–º —Ä–æ–¥–∞–º –µ—Å–ª–∏ –µ—Å—Ç—å
        if current_birth < data['childbirth_count']:
            next_birth = current_birth + 1
            await state.update_data(
                childbirth_data=childbirth_data,
                current_birth=next_birth
            )
            
            await message.answer(
                f"üìä –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞ –î–û {next_birth}-—Ö —Ä–æ–¥–æ–≤ (–¥–Ω–µ–π):\n"
                f"–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {data['hayd_average_days']} –¥–Ω–µ–π\n\n"
                "üí° –≠—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü–∏–∫–ª–∞ –º–µ–∂–¥—É —Ä–æ–¥–∞–º–∏\n"
                "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0 –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è:"
            )
            await state.set_state(RegistrationStates.waiting_for_hayd_before_birth)
        else:
            # –í—Å–µ —Ä–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
            await state.update_data(childbirth_data=childbirth_data)
            await show_confirmation(message, state)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

async def show_confirmation(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    data = await state.get_data()
    
    confirmation_text = (
        "üìã **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**\n\n"
        f"üë§ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if data['gender'] == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['birth_date'].strftime('%d.%m.%Y')}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {data['city']}\n"
    )
    
    if False and data['gender'] == 'female':
        confirmation_text += f"\nüåô –¢–µ–∫—É—â–∏–π —Ö–∞–π–¥: {data.get('hayd_average_days', 0)} –¥–Ω–µ–π\n"
        confirmation_text += f"üë∂ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–¥–æ–≤: {data.get('childbirth_count', 0)}\n"
        
        if data.get('childbirth_data'):
            confirmation_text += "\n**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–¥–∞—Ö:**\n"
            for birth in data['childbirth_data']:
                confirmation_text += f"‚Ä¢ {birth['number']}-–µ —Ä–æ–¥—ã: {birth['date']}, –Ω–∏—Ñ–∞—Å {birth['nifas_days']} –¥–Ω–µ–π, —Ö–∞–π–¥ –¥–æ —Ä–æ–¥–æ–≤ {birth['hayd_before']} –¥–Ω–µ–π\n"
    
    confirmation_text += "\n–í—Å–µ –≤–µ—Ä–Ω–æ?"
    
    await message.answer(
        confirmation_text,
        reply_markup=get_confirmation_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(RegistrationStates.confirmation)

@router.callback_query(RegistrationStates.confirmation, F.data == "confirm_registration")
async def confirm_registration(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    data = await state.get_data()
    
    # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è
    adult_age = config.ADULT_AGE_FEMALE if data['gender'] == 'female' else config.ADULT_AGE_MALE
    adult_date = data['birth_date'].replace(year=data['birth_date'].year + adult_age)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ–¥–∞—Ö –¥–ª—è JSON (–±–µ–∑ hayd_after)
    childbirth_data_json = None
    if data.get('childbirth_data'):
        childbirth_data_json = json.dumps(data['childbirth_data'])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    success = await user_service.complete_registration(
        telegram_id=callback.from_user.id,
        gender=data['gender'],
        birth_date=data['birth_date'],
        city=data['city'],
        adult_date=adult_date,
        hayd_average_days=data.get('hayd_average_days'),
        childbirth_count=data.get('childbirth_count', 0),
        childbirth_data=childbirth_data_json
    )
    
    if success:
        await callback.message.edit_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏
        user = await user_service.get_or_create_user(
            telegram_id=callback.from_user.id,
            username=callback.from_user.username
        )
        
        # –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if user.role == config.Roles.ADMIN:
            keyboard = get_admin_menu_keyboard()
            welcome_text = "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        elif user.role == config.Roles.MODERATOR:
            keyboard = get_moderator_menu_keyboard()
            welcome_text = "üëÆ –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"
        else:
            keyboard = get_main_menu_keyboard()
            welcome_text = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        
        await callback.message.answer(
            f"üïå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ø—à–µ–ª –¢—Ä–µ–∫–µ—Ä!\n\n"
            f"{welcome_text}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞—Å—á–µ—Ç—É –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–º–∞–∑–æ–≤ –∏ –ø–æ—Å—Ç–æ–≤.",
            reply_markup=keyboard
        )
        
        await state.clear()
    else:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.callback_query(RegistrationStates.confirmation, F.data == "edit_registration")
async def edit_registration(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await callback.message.edit_text(
        "üë§ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        reply_markup=get_gender_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_gender)