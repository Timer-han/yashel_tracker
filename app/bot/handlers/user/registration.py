from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from datetime import datetime, date

from ...keyboards.user.registration import get_gender_keyboard, get_confirmation_keyboard, get_childbirth_keyboard
from ...keyboards.user.main_menu import get_main_menu_keyboard, get_moderator_menu_keyboard, get_admin_menu_keyboard
from ....core.services.user_service import UserService
from ....core.config import config
from ...states.registration import RegistrationStates
from ...utils.date_utils import parse_date

import logging
logger = logging.getLogger(__name__)

router = Router()
user_service = UserService()

@router.message(RegistrationStates.waiting_for_gender)
async def process_gender(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    if message.text == "üë® –ú—É–∂—Å–∫–æ–π":
        gender = "male"
    elif message.text == "üë© –ñ–µ–Ω—Å–∫–∏–π":
        gender = "female"
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.")
        return
    
    await state.update_data(gender=gender)
    
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990",
        reply_markup=None
    )
    await state.set_state(RegistrationStates.waiting_for_birth_date)

@router.message(RegistrationStates.waiting_for_birth_date)
async def process_birth_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    birth_date = parse_date(message.text)
    if not birth_date:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
    today = date.today()
    age = today.year - birth_date.year
    if age < 8 or age > 100:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.")
        return
    
    await state.update_data(birth_date=birth_date)
    
    await message.answer(
        "üèôÔ∏è –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ?\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –ö–∞–∑–∞–Ω—å, –ë–∞–∫—É\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –≥–æ—Ä–æ–¥."
    )
    await state.set_state(RegistrationStates.waiting_for_city)

@router.message(RegistrationStates.waiting_for_city)
async def process_city(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞"""
    city = None if message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else message.text.strip()
    await state.update_data(city=city)
    
    data = await state.get_data()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–µ–Ω—â–∏–Ω–∞, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ —Ä–æ–¥–∞—Ö
    if data['gender'] == 'female':
        await message.answer(
            "üë∂ –ë—ã–ª–∏ –ª–∏ —É –≤–∞—Å —Ä–æ–¥—ã?",
            reply_markup=get_childbirth_keyboard()
        )
        await state.set_state(RegistrationStates.asking_about_childbirths)
    else:
        # –î–ª—è –º—É–∂—á–∏–Ω —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        await show_confirmation(message, state)

@router.callback_query(RegistrationStates.asking_about_childbirths, F.data == "has_childbirths")
async def has_childbirths(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç —Ä–æ–¥—ã"""
    await callback.message.edit_text(
        "üë∂ –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã —Ä–æ–∂–∞–ª–∏?\n"
        "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:"
    )
    await state.set_state(RegistrationStates.waiting_for_childbirth_count)

@router.callback_query(RegistrationStates.asking_about_childbirths, F.data == "no_childbirths")
async def no_childbirths(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç —Ä–æ–¥–æ–≤"""
    await state.update_data(
        childbirth_count=0,
        childbirths=[],
        nifas_lengths=[]
    )
    
    await callback.message.edit_text(
        "ü©∏ –í–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω—é—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞ (–º–µ—Å—è—á–Ω—ã—Ö) –≤ –¥–Ω—è—Ö:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 5\n\n"
        "–ú–∏–Ω–∏–º—É–º 3 –¥–Ω—è, –º–∞–∫—Å–∏–º—É–º 10 –¥–Ω–µ–π –ø–æ —Ö–∞–Ω–∞—Ñ–∏."
    )
    await state.set_state(RegistrationStates.waiting_for_average_hyde)

@router.message(RegistrationStates.waiting_for_childbirth_count)
async def process_childbirth_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–æ–¥–æ–≤"""
    try:
        count = int(message.text)
        if count < 1 or count > 20:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20")
            return
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    
    await state.update_data(
        childbirth_count=count,
        childbirths=[],
        hyde_periods=[],
        nifas_lengths=[],
        current_birth_index=0
    )
    
    await message.answer(
        "ü©∏ –í–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω—é—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞ (–º–µ—Å—è—á–Ω—ã—Ö) –î–û –ø–µ—Ä–≤—ã—Ö —Ä–æ–¥–æ–≤ –≤ –¥–Ω—è—Ö:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 5\n\n"
        "–ú–∏–Ω–∏–º—É–º 3 –¥–Ω—è, –º–∞–∫—Å–∏–º—É–º 10 –¥–Ω–µ–π –ø–æ —Ö–∞–Ω–∞—Ñ–∏."
    )
    await state.set_state(RegistrationStates.waiting_for_hyde_before_first)

@router.message(RegistrationStates.waiting_for_hyde_before_first)
async def process_hyde_before_first(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–∞–π–¥–∞ –¥–æ –ø–µ—Ä–≤—ã—Ö —Ä–æ–¥–æ–≤"""
    try:
        hyde_days = int(message.text)
        if hyde_days < 3 or hyde_days > 10:
            await message.answer("‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 3 –¥–æ 10 –¥–Ω–µ–π")
            return
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    
    data = await state.get_data()
    hyde_periods = data.get('hyde_periods', [])
    hyde_periods.append(hyde_days)
    
    await state.update_data(hyde_periods=hyde_periods)
    
    await message.answer(
        "ü§± –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 1-–≥–æ –Ω–∏—Ñ–∞—Å–∞ (–ø–æ—Å–ª–µ—Ä–æ–¥–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞) –≤ –¥–Ω—è—Ö:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 30\n\n"
        "–ú–∞–∫—Å–∏–º—É–º 40 –¥–Ω–µ–π –ø–æ —Ö–∞–Ω–∞—Ñ–∏."
    )
    await state.set_state(RegistrationStates.waiting_for_nifas_length)

@router.message(RegistrationStates.waiting_for_nifas_length)
async def process_nifas_length(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∏—Ñ–∞—Å–∞"""
    try:
        nifas_days = int(message.text)
        if nifas_days < 0 or nifas_days > 40:
            await message.answer("‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∏—Ñ–∞—Å–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 40 –¥–Ω–µ–π")
            return
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    
    data = await state.get_data()
    nifas_lengths = data.get('nifas_lengths', [])
    nifas_lengths.append(nifas_days)
    current_birth_index = data.get('current_birth_index', 0)
    childbirth_count = data.get('childbirth_count', 0)
    
    await state.update_data(nifas_lengths=nifas_lengths)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–æ–¥–∞—Ö
    if current_birth_index + 1 < childbirth_count:
        next_birth = current_birth_index + 2  # +2 –ø–æ—Ç–æ–º—É —á—Ç–æ —Å—á–∏—Ç–∞–µ–º —Å 1
        await state.update_data(current_birth_index=current_birth_index + 1)
        
        await message.answer(
            f"ü©∏ –í–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω—é—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞ –ü–û–°–õ–ï {current_birth_index + 1}-—Ö —Ä–æ–¥–æ–≤ –≤ –¥–Ω—è—Ö:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 5"
        )
        await state.set_state(RegistrationStates.waiting_for_hyde_after_birth)
    else:
        # –í—Å–µ —Ä–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        await show_confirmation(message, state)

@router.message(RegistrationStates.waiting_for_hyde_after_birth)
async def process_hyde_after_birth(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–∞–π–¥–∞ –ø–æ—Å–ª–µ —Ä–æ–¥–æ–≤"""
    try:
        hyde_days = int(message.text)
        if hyde_days < 3 or hyde_days > 10:
            await message.answer("‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 3 –¥–æ 10 –¥–Ω–µ–π")
            return
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    
    data = await state.get_data()
    hyde_periods = data.get('hyde_periods', [])
    hyde_periods.append(hyde_days)
    current_birth_index = data.get('current_birth_index', 0)
    childbirth_count = data.get('childbirth_count', 0)
    
    await state.update_data(hyde_periods=hyde_periods)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Ä–æ–¥—ã, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ —Å–ª–µ–¥—É—é—â–µ–º –Ω–∏—Ñ–∞—Å–µ
    if current_birth_index + 1 < childbirth_count:
        next_birth = current_birth_index + 2
        await message.answer(
            f"ü§± –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {next_birth}-–≥–æ –Ω–∏—Ñ–∞—Å–∞ –≤ –¥–Ω—è—Ö:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 35"
        )
        await state.set_state(RegistrationStates.waiting_for_nifas_length)
    else:
        # –í—Å–µ —Ä–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        await show_confirmation(message, state)

@router.message(RegistrationStates.waiting_for_average_hyde)
async def process_average_hyde(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–µ–¥–Ω–µ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ö–∞–π–¥–∞"""
    try:
        hyde_days = int(message.text)
        if hyde_days < 3 or hyde_days > 10:
            await message.answer("‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 3 –¥–æ 10 –¥–Ω–µ–π")
            return
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    
    await state.update_data(hyde_periods=[hyde_days])
    await show_confirmation(message, state)

async def show_confirmation(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    data = await state.get_data()
    
    confirmation_text = (
        "üìã **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**\n\n"
        f"üë§ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if data['gender'] == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['birth_date'].strftime('%d.%m.%Y')}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    )
    
    if data['gender'] == 'female':
        if data.get('childbirth_count', 0) > 0:
            confirmation_text += f"\nüë∂ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–¥–æ–≤: {data['childbirth_count']}\n"
            confirmation_text += f"ü©∏ –ü–µ—Ä–∏–æ–¥—ã —Ö–∞–π–¥–∞: {', '.join(map(str, data.get('hyde_periods', [])))}\n"
            confirmation_text += f"ü§± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∏—Ñ–∞—Å–∞: {', '.join(map(str, data.get('nifas_lengths', [])))}\n"
        else:
            confirmation_text += f"\nü©∏ –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞: {data.get('hyde_periods', [0])[0]} –¥–Ω–µ–π\n"
    
    confirmation_text += "\n–í—Å–µ –≤–µ—Ä–Ω–æ?"
    
    await message.answer(
        confirmation_text,
        reply_markup=get_confirmation_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(RegistrationStates.confirmation)

@router.callback_query(RegistrationStates.confirmation, F.data == "confirm_registration")
async def confirm_registration(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    success = await user_service.complete_registration(
        telegram_id=callback.from_user.id,
        gender=data['gender'],
        birth_date=data['birth_date'],
        city=data.get('city'),
        childbirth_count=data.get('childbirth_count', 0),
        childbirths=data.get('childbirths', []),
        hyde_periods=data.get('hyde_periods', []),
        nifas_lengths=data.get('nifas_lengths', [])
    )
    
    if success:
        await callback.message.edit_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏
        user = await user_service.get_or_create_user(
            telegram_id=callback.from_user.id,
            username=callback.from_user.username,
            first_name=callback.from_user.first_name,
            last_name=callback.from_user.last_name
        )
        
        # –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if user.role == config.Roles.ADMIN:
            keyboard = get_admin_menu_keyboard()
            welcome_text = "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        elif user.role == config.Roles.MODERATOR:
            keyboard = get_moderator_menu_keyboard()
            welcome_text = "üëÆ –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"
        else:
            keyboard = get_main_menu_keyboard()
            welcome_text = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        
        await callback.message.answer(
            f"üïå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ø—à–µ–ª –¢—Ä–µ–∫–µ—Ä!\n\n"
            f"{welcome_text}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞—Å—á–µ—Ç—É –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–º–∞–∑–æ–≤ –∏ –ø–æ—Å—Ç–æ–≤.",
            reply_markup=keyboard
        )
        
        await state.clear()
    else:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.callback_query(RegistrationStates.confirmation, F.data == "edit_registration")
async def edit_registration(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await callback.message.edit_text(
        "üë§ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        reply_markup=get_gender_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_gender)