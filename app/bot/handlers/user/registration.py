from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from datetime import datetime, date, timedelta
import json
import logging

from ...keyboards.user.registration import (
    get_gender_selection_keyboard, get_childbirth_count_keyboard,
    get_hayd_duration_presets_keyboard, get_nifas_duration_presets_keyboard,
    get_use_default_hayd_keyboard, get_data_confirmation_keyboard
)
from ...keyboards.user.main_menu import get_main_menu_keyboard, get_moderator_menu_keyboard, get_admin_menu_keyboard
from ....core.services.user_service import UserService
from ....core.config import config, escape_markdown
from ...states.registration import RegistrationStates
from ...utils.text_messages import text_message

logger = logging.getLogger(__name__)
router = Router()
user_service = UserService()

# ================================
# UTILITY FUNCTIONS
# ================================

def calculate_lunar_adult_date(birth_date: date, lunar_years: int) -> date:
    """–†–∞—Å—á–µ—Ç –¥–∞—Ç—ã —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è –ø–æ –ª—É–Ω–Ω–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é"""
    LUNAR_YEAR_DAYS = 354.37
    total_lunar_days = int(lunar_years * LUNAR_YEAR_DAYS)
    return birth_date + timedelta(days=total_lunar_days)

def get_lunar_age(birth_date: date, current_date: date = None) -> tuple[int, int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç –≤ –ª—É–Ω–Ω—ã—Ö –≥–æ–¥–∞—Ö –∏ –¥–Ω—è—Ö"""
    if current_date is None:
        current_date = date.today()
    days_lived = (current_date - birth_date).days
    return days_lived // 354, days_lived % 354

def format_confirmation_text(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    gender_text = '–ú—É–∂—Å–∫–æ–π' if data['gender'] == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'
    birth_date_text = data['birth_date'].strftime('%d.%m.%Y')
    
    text = (
        f"üë§ –ü–æ–ª: {escape_markdown(gender_text)}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {escape_markdown(birth_date_text)}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {escape_markdown(data['city'])}\n"
    )
    
    if False and data['gender'] == 'female':
        hayd_days = data.get('hayd_average_days', 0)
        birth_count = data.get('childbirth_count', 0)
        text += f"\nüåô –°—Ä–µ–¥–Ω–∏–π —Ö–∞–π–¥: {hayd_days} –¥–Ω–µ–π\n"
        text += f"üë∂ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–¥–æ–≤: {birth_count}\n"
        
        if data.get('childbirth_data'):
            text += "\n*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–¥–∞—Ö:*\n"
            for birth in data['childbirth_data']:
                text += (f"‚Ä¢ {birth['number']}\-–µ —Ä–æ–¥—ã: {birth['date']}, "
                        f"–Ω–∏—Ñ–∞—Å {birth['nifas_days']} –¥–Ω–µ–π\n")
    
    text += "\n‚ùì –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã?"
    return text

async def save_user_registration(callback: CallbackQuery, data: dict) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É"""
    adult_age = config.ADULT_AGE_FEMALE if data['gender'] == 'female' else config.ADULT_AGE_MALE
    adult_date = calculate_lunar_adult_date(data['birth_date'], adult_age)
    
    childbirth_data_json = None
    if data.get('childbirth_data'):
        childbirth_data_json = json.dumps(data['childbirth_data'])
    
    return await user_service.complete_registration(
        telegram_id=callback.from_user.id,
        gender=data['gender'],
        birth_date=data['birth_date'],
        city=data['city'],
        adult_date=adult_date,
        hayd_average_days=data.get('hayd_average_days'),
        childbirth_count=data.get('childbirth_count', 0),
        childbirth_data=childbirth_data_json
    )

# ================================
# MAIN REGISTRATION HANDLERS
# ================================

@router.callback_query(RegistrationStates.gender_selection, F.data.startswith("gender:"))
async def handle_gender_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    gender = callback.data.split(":")[1]  # "gender:male" -> "male"
    await state.update_data(gender=gender)
    
    await callback.message.edit_text(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n\n"
        "üìù –ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990"
    )
    await state.set_state(RegistrationStates.birth_date_input)

@router.message(RegistrationStates.birth_date_input)
async def handle_birth_date_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    try:
        birth_date = datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ª—É–Ω–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞
        lunar_years, _ = get_lunar_age(birth_date)
        if lunar_years < 8 or lunar_years > 100:
            solar_age = date.today().year - birth_date.year
            await message.answer(
                f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è\n\n"
                f"–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: ~{solar_age} —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –ª–µ—Ç ({lunar_years} –ª—É–Ω–Ω—ã—Ö –ª–µ—Ç)\n"
                f"–î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 8-100 –ª—É–Ω–Ω—ã—Ö –ª–µ—Ç"
            )
            return
        
        await state.update_data(birth_date=birth_date)
        
        await message.answer(
            "üèôÔ∏è –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è\n\n"
            "üìù –ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –ö–∞–∑–∞–Ω—å, –ë–∞–∫—É"
        )
        await state.set_state(RegistrationStates.city_input)
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã\n\n"
            "üìÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "üìù –ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990"
        )

@router.message(RegistrationStates.city_input)
async def handle_city_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞"""
    city = message.text.strip()
    await state.update_data(city=city)
    
    data = await state.get_data()
    
    if False and data['gender'] == 'female':
        await message.answer(
            "üåô –£–∫–∞–∂–∏—Ç–µ —Å—Ä–µ–¥–Ω—é—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞ (–æ—Ç 3 –¥–æ 10 –¥–Ω–µ–π)",
            reply_markup=get_hayd_duration_presets_keyboard()
        )
        await state.set_state(RegistrationStates.hayd_duration_input)
    else:
        await show_confirmation(message, state)

# ================================
# FEMALE-SPECIFIC HANDLERS
# ================================

@router.callback_query(RegistrationStates.hayd_duration_input, F.data.startswith("hayd:"))
async def handle_hayd_duration_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ö–∞–π–¥–∞"""
    hayd_data = callback.data.split(":")[1]
    
    if hayd_data == "manual":
        await callback.message.edit_text(
            "üåô –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞ –≤ –¥–Ω—è—Ö\n\n"
            f"üìè –î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: {config.HAYD_MIN_DAYS}-{config.HAYD_MAX_DAYS} –¥–Ω–µ–π\n"
            "üìù –ù–∞–ø—Ä–∏–º–µ—Ä: 5"
        )
        return
    
    hayd_days = float(hayd_data)
    await state.update_data(hayd_average_days=hayd_days)
    
    await callback.message.edit_text(
        "üë∂ –°–∫–æ–ª—å–∫–æ —É –≤–∞—Å –±—ã–ª–æ —Ä–æ–¥–æ–≤?",
        reply_markup=get_childbirth_count_keyboard()
    )
    await state.set_state(RegistrationStates.childbirth_count_input)

@router.message(RegistrationStates.hayd_duration_input)
async def handle_hayd_duration_manual_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ö–∞–π–¥–∞"""
    try:
        hayd_days = float(message.text.strip())
        if not (config.HAYD_MIN_DAYS <= hayd_days <= config.HAYD_MAX_DAYS):
            await message.answer(
                f"‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç {config.HAYD_MIN_DAYS} –¥–æ {config.HAYD_MAX_DAYS} –¥–Ω–µ–π"
            )
            return
        
        await state.update_data(hayd_average_days=hayd_days)
        
        await message.answer(
            "üë∂ –°–∫–æ–ª—å–∫–æ —É –≤–∞—Å –±—ã–ª–æ —Ä–æ–¥–æ–≤?",
            reply_markup=get_childbirth_count_keyboard()
        )
        await state.set_state(RegistrationStates.childbirth_count_input)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

@router.callback_query(RegistrationStates.childbirth_count_input, F.data.startswith("births:"))
async def handle_childbirth_count_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–æ–¥–æ–≤"""
    births_data = callback.data.split(":")[1]
    
    if births_data == "manual":
        await callback.message.edit_text(
            "üë∂ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–¥–æ–≤ —á–∏—Å–ª–æ–º\n\n"
            "üìù –ù–∞–ø—Ä–∏–º–µ—Ä: 7"
        )
        return
    
    count = int(births_data)
    await state.update_data(
        childbirth_count=count,
        childbirth_data=[],
        current_birth=1
    )
    
    if count > 0:
        await start_childbirth_data_collection(callback, state)
    else:
        await show_confirmation_inline(callback, state)

@router.message(RegistrationStates.childbirth_count_input)
async def handle_childbirth_count_manual_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–æ–¥–æ–≤"""
    try:
        count = int(message.text.strip())
        if count < 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
            return
        
        await state.update_data(
            childbirth_count=count,
            childbirth_data=[],
            current_birth=1
        )
        
        if count > 0:
            data = await state.get_data()
            await message.answer(
                f"üìä –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞ –î–û 1-—Ö —Ä–æ–¥–æ–≤\n\n"
                f"üí° –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {data['hayd_average_days']} –¥–Ω–µ–π",
                reply_markup=get_use_default_hayd_keyboard(data['hayd_average_days'])
            )
            await state.set_state(RegistrationStates.pre_birth_hayd_input)
        else:
            await show_confirmation(message, state)
            
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

async def start_childbirth_data_collection(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ —Ä–æ–¥–∞—Ö"""
    data = await state.get_data()
    await callback.message.edit_text(
        f"üìä –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞ –î–û 1-—Ö —Ä–æ–¥–æ–≤\n\n"
        f"üí° –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {data['hayd_average_days']} –¥–Ω–µ–π",
        reply_markup=get_use_default_hayd_keyboard(data['hayd_average_days'])
    )
    await state.set_state(RegistrationStates.pre_birth_hayd_input)

# ================================
# CHILDBIRTH DATA COLLECTION
# ================================

@router.callback_query(RegistrationStates.pre_birth_hayd_input, F.data.startswith("hayd:"))
async def handle_pre_birth_hayd_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ö–∞–π–¥–∞ –¥–æ —Ä–æ–¥–æ–≤"""
    hayd_data = callback.data.split(":")[1]
    
    if hayd_data == "manual":
        await callback.message.edit_text(
            "üìä –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞ –¥–æ —Ä–æ–¥–æ–≤ –≤ –¥–Ω—è—Ö\n\n"
            f"üìè –î–∏–∞–ø–∞–∑–æ–Ω: {config.HAYD_MIN_DAYS}-{config.HAYD_MAX_DAYS} –¥–Ω–µ–π"
        )
        return
    
    hayd_before = float(hayd_data)
    await state.update_data(current_hayd_before=hayd_before)
    
    data = await state.get_data()
    current_birth = data['current_birth']
    
    await callback.message.edit_text(
        f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É {current_birth}-—Ö —Ä–æ–¥–æ–≤\n\n"
        f"üìù –§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì\n"
        f"üìù –ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.2020"
    )
    await state.set_state(RegistrationStates.childbirth_date_input)

@router.message(RegistrationStates.pre_birth_hayd_input)
async def handle_pre_birth_hayd_manual_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ö–∞–π–¥–∞ –¥–æ —Ä–æ–¥–æ–≤"""
    try:
        hayd_before = float(message.text.strip())
        if not (config.HAYD_MIN_DAYS <= hayd_before <= config.HAYD_MAX_DAYS):
            await message.answer(
                f"‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç {config.HAYD_MIN_DAYS} –¥–æ {config.HAYD_MAX_DAYS} –¥–Ω–µ–π"
            )
            return
        
        await state.update_data(current_hayd_before=hayd_before)
        
        data = await state.get_data()
        current_birth = data['current_birth']
        
        await message.answer(
            f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É {current_birth}-—Ö —Ä–æ–¥–æ–≤\n\n"
            f"üìù –§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì\n"
            f"üìù –ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.2020"
        )
        await state.set_state(RegistrationStates.childbirth_date_input)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

@router.message(RegistrationStates.childbirth_date_input)
async def handle_childbirth_date_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–¥–æ–≤"""
    try:
        birth_date = datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
        data = await state.get_data()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
        if birth_date > date.today():
            await message.answer("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
            return
        
        if birth_date < data['birth_date']:
            await message.answer("‚ùå –î–∞—Ç–∞ —Ä–æ–¥–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è")
            return
        
        await state.update_data(current_birth_date=birth_date)
        
        current_birth = data['current_birth']
        await message.answer(
            f"üåô –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∏—Ñ–∞—Å–∞ –ø–æ—Å–ª–µ {current_birth}-—Ö —Ä–æ–¥–æ–≤",
            reply_markup=get_nifas_duration_presets_keyboard()
        )
        await state.set_state(RegistrationStates.nifas_duration_input)
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã\n\n"
            "üìÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "üìù –ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.2020"
        )

@router.callback_query(RegistrationStates.nifas_duration_input, F.data.startswith("nifas:"))
async def handle_nifas_duration_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∏—Ñ–∞—Å–∞"""
    nifas_data = callback.data.split(":")[1]
    
    if nifas_data == "manual":
        await callback.message.edit_text(
            f"üåô –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∏—Ñ–∞—Å–∞ –≤ –¥–Ω—è—Ö\n\n"
            f"üìè –ú–∞–∫—Å–∏–º—É–º: {config.NIFAS_MAX_DAYS} –¥–Ω–µ–π\n"
            f"üìù –ù–∞–ø—Ä–∏–º–µ—Ä: 30"
        )
        return
    
    await process_nifas_duration(callback, int(nifas_data), state)

@router.message(RegistrationStates.nifas_duration_input)
async def handle_nifas_duration_manual_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∏—Ñ–∞—Å–∞"""
    try:
        nifas_days = int(message.text.strip())
        if not (0 <= nifas_days <= config.NIFAS_MAX_DAYS):
            await message.answer(
                f"‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ {config.NIFAS_MAX_DAYS} –¥–Ω–µ–π"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π callback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å process_nifas_duration
        class FakeCallback:
            def __init__(self, message):
                self.message = message
        
        await process_nifas_duration(FakeCallback(message), nifas_days, state, is_message=True)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

async def process_nifas_duration(callback_or_message, nifas_days: int, state: FSMContext, is_message=False):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∏—Ñ–∞—Å–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É"""
    data = await state.get_data()
    childbirth_data = data['childbirth_data']
    current_birth = data['current_birth']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö —Ä–æ–¥–∞—Ö
    birth_info = {
        'number': current_birth,
        'date': data['current_birth_date'].isoformat(),
        'nifas_days': nifas_days,
        'hayd_before': data['current_hayd_before']
    }
    childbirth_data.append(birth_info)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Ä–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if current_birth < data['childbirth_count']:
        next_birth = current_birth + 1
        await state.update_data(
            childbirth_data=childbirth_data,
            current_birth=next_birth
        )
        
        text = (f"üìä –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞ –î–û {next_birth}-—Ö —Ä–æ–¥–æ–≤\n\n"
                f"üí° –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {data['hayd_average_days']} –¥–Ω–µ–π")
        keyboard = get_use_default_hayd_keyboard(data['hayd_average_days'])
        
        if is_message:
            await callback_or_message.answer(text, reply_markup=keyboard)
        else:
            await callback_or_message.message.edit_text(text, reply_markup=keyboard)
            
        await state.set_state(RegistrationStates.pre_birth_hayd_input)
    else:
        # –í—Å–µ —Ä–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        await state.update_data(childbirth_data=childbirth_data)
        
        if is_message:
            await show_confirmation(callback_or_message, state)
        else:
            await show_confirmation_inline(callback_or_message, state)

# ================================
# CONFIRMATION HANDLERS
# ================================

async def show_confirmation(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    data = await state.get_data()
    confirmation_text = format_confirmation_text(data)
    
    await message.answer(
        confirmation_text,
        reply_markup=get_data_confirmation_keyboard(),
        parse_mode="MarkdownV2"
    )
    await state.set_state(RegistrationStates.data_confirmation)

async def show_confirmation_inline(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ inline —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    data = await state.get_data()
    confirmation_text = format_confirmation_text(data)
    
    await callback.message.edit_text(
        confirmation_text,
        reply_markup=get_data_confirmation_keyboard(),
        parse_mode="MarkdownV2"
    )
    await state.set_state(RegistrationStates.data_confirmation)

@router.callback_query(RegistrationStates.data_confirmation, F.data.startswith("confirm:"))
async def handle_confirmation(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    action = callback.data.split(":")[1]  # "confirm:yes" -> "yes"
    
    if action == "yes":
        await finalize_registration(callback, state)
    elif action == "edit":
        await restart_registration(callback, state)

async def finalize_registration(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = await state.get_data()
    
    success = await save_user_registration(callback, data)
    
    if success:
        await callback.message.edit_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏
        user = await user_service.get_or_create_user(
            telegram_id=callback.from_user.id,
            username=callback.from_user.username
        )
        
        # –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        role_keyboards = {
            config.Roles.ADMIN: (get_admin_menu_keyboard(), "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
            config.Roles.MODERATOR: (get_moderator_menu_keyboard(), "üëÆ –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"),
        }
        
        keyboard, welcome_text = role_keyboards.get(
            user.role, (get_main_menu_keyboard(), "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        )
        
        await callback.message.answer(
            f"üïå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ø—à–µ–ª –¢—Ä–µ–∫–µ—Ä\!\n\n"
            f"–Ø ‚Äî –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–¥—Å—á—ë—Ç–µ –∏ –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–º–∞–∑–æ–≤ –∏ –ø–æ—Å—Ç–æ–≤ "
            f"–ø–æ —Ö–∞–Ω–∞—Ñ–∏—Ç—Å–∫–æ–º—É –º–∞–∑—Ö–∞–±—É\n\n"
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∫–ª–æ–Ω–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –Ω–∞—à–µ–º [–∫–∞–Ω–∞–ª–µ]"
            f"({text_message.CHANNEL_LINK})\n\n"
            f"–ò–∑—É—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ üòä\n\n"
            f"{welcome_text}",
            reply_markup=keyboard,
            parse_mode='MarkdownV2'
        )
        
        await state.clear()
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ"
        )

async def restart_registration(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await callback.message.edit_text(
        "üë§ –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª:",
        reply_markup=get_gender_selection_keyboard()
    )
    await state.set_state(RegistrationStates.gender_selection)