from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from ...keyboards.user.fasting import (
    get_fasting_keyboard, 
    get_fasting_calculation_method_keyboard,
    get_female_fasting_calculation_method_keyboard,
    get_fasting_confirmation_keyboard
)
from ....core.services.fasting_calculation_service import FastingCalculationService
from ....core.services.user_service import UserService
from ...states.fasting import FastingStates
from ....core.config import config, escape_markdown
from ...utils.date_utils import parse_date, format_date

router = Router()
fasting_calc_service = FastingCalculationService()
user_service = UserService()

@router.message(F.text == "üìø –ü–æ—Å—Ç—ã")
async def show_fasting_menu(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –ø–æ—Å—Ç–æ–≤"""
    await state.clear()
    
    user = await user_service.get_or_create_user(message.from_user.id)
    
    if not user.is_registered:
        await message.answer(
            "üìä –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–∞–º–∏\.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start",
            parse_mode="MarkdownV2"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å—Ç–æ–≤
    missed_days = user.fasting_missed_days or 0
    completed_days = user.fasting_completed_days or 0
    remaining_days = max(0, missed_days - completed_days)
    
    stats_text = (
        "üìø *–ü–æ—Å—Ç—ã*\n\n"
        f"üìù –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥–Ω–µ–π: *{missed_days}*\n"
        f"‚úÖ –í–æ—Å–ø–æ–ª–Ω–µ–Ω–æ –¥–Ω–µ–π: *{completed_days}*\n"
        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: *{remaining_days}*\n"
    )
    
    if missed_days > 0:
        progress = (completed_days / missed_days) * 100
        progress_bar = "‚ñì" * int(progress / 10) + "‚ñë" * (10 - int(progress / 10))
        stats_text += escape_markdown(f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: [{progress_bar}] {progress:.1f}%")
    
    await message.answer(
        stats_text,
        reply_markup=get_fasting_keyboard(),
        parse_mode="MarkdownV2"
    )

@router.callback_query(F.data == "fast_calculate")
async def start_fast_calculation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ—Å—Ç–æ–≤ - –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞"""
    user = await user_service.get_or_create_user(callback.from_user.id)
    
    if not user.is_registered:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", show_alert=True)
        return
    
    # if user.gender == 'male':
    #     reply_markup = get_fasting_calculation_method_keyboard()
    # else:
    #     reply_markup = get_female_fasting_calculation_method_keyboard()
        
    reply_markup = get_fasting_calculation_method_keyboard()
    
    await callback.message.edit_text(
        "üî¢ *–†–∞—Å—á–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤*\n\n"
        "–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± —Ä–∞—Å—á–µ—Ç–∞:",
        reply_markup=reply_markup,
        parse_mode="MarkdownV2"
    )
    await state.set_state(FastingStates.choosing_method)

# @router.callback_query(FastingStates.choosing_method, F.data == "fast_calc_from_age")
# async def calc_fasts_from_age(callback: CallbackQuery, state: FSMContext):
#     """–†–∞—Å—á–µ—Ç –ø–æ—Å—Ç–æ–≤ –æ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è"""
#     await callback.message.edit_text(
#         "üìÖ *–†–∞—Å—á–µ—Ç –æ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è*\n\n"
#         "–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç –ø–æ—Å—Ç—ã –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è –¥–æ –¥–∞—Ç—ã, "
#         "–∫–æ–≥–¥–∞ –≤—ã –Ω–∞—á–∞–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ —Å–æ–±–ª—é–¥–∞—Ç—å –ø–æ—Å—Ç—ã –†–∞–º–∞–¥–∞–Ω–∞.\n\n"
#         "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –≤—ã –Ω–∞—á–∞–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ —Å–æ–±–ª—é–¥–∞—Ç—å –ø–æ—Å—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n"
#         "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.05.2020"
#     )
#     await state.set_state(FastingStates.waiting_for_fast_start_date)

# @router.message(FastingStates.waiting_for_fast_start_date)
# async def process_fast_start_date(message: Message, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ (–æ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è)"""
#     fast_start_date = parse_date(message.text)
#     if not fast_start_date:
#         await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì")
#         return
    
#     user = await user_service.get_or_create_user(message.from_user.id)
    
#     if not user.birth_date:
#         await message.answer("‚ùå –î–ª—è —ç—Ç–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω—É–∂–Ω–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
#         return
    
#     # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç—ã
#     result = fasting_calc_service.calculate_fasts_from_age(
#         birth_date=user.birth_date,
#         fast_start_date=fast_start_date,
#         gender=user.gender or 'male',
#         hayd_average_days=user.hayd_average_days,
#         childbirth_data=user.get_childbirth_info()
#     )
    
#     await _show_calculation_result(message, result, state, fast_start_date)

@router.callback_query(FastingStates.choosing_method, F.data == "fast_calc_years")
async def calc_fasts_between_dates(callback: CallbackQuery, state: FSMContext):
    """–†–∞—Å—á–µ—Ç –ø–æ—Å—Ç–æ–≤ –∑–∞ –≥–æ–¥–∞"""
    # user = await user_service.get_or_create_user(callback.from_user.id)
    # if user.gender == 'female':
    #     await callback.answer(
    #         "‚ùå –î–ª—è –∂–µ–Ω—â–∏–Ω —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç.\n"
    #         "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ—Å—Ç–æ–≤.",
    #         reply_markup=get_female_fasting_calculation_method_keyboard()
    #     )

    user = await user_service.get_or_create_user(callback.from_user.id)
    
    if user.gender == 'male':
        await callback.message.edit_text(
            "üìÖ *–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –ø–æ—Å—Ç–æ–≤ —Ç—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª\?*\n\n"
            "–í–≤–µ–¥–∏ –ø–æ–ª–Ω–æ–µ —á–∏—Å–ª–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ª–µ—Ç —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è –ø–æ –ò—Å–ª–∞–º—É –¥–æ –Ω–∞—á–∞–ª–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤\.\n\n"
            "P\.S\. –î–∞–ª—å—à–µ —Ç—ã —Å–º–æ–∂–µ—à—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–±–∞–≤–∏—Ç—å –¥–Ω–∏, –µ—Å–ª–∏ –≤ —ç—Ç–æ–º –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å\.",
            parse_mode='MarkdownV2'
        )
    else:
        await callback.message.edit_text(
            "üìÖ *–†–∞—Å—á—ë—Ç –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏*\n\n"
            "–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –ø–æ—Å—Ç–æ–≤ —Ç—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∞\?\n",
            parse_mode='MarkdownV2'
        )
    await state.set_state(FastingStates.waiting_for_fast_year_count)

# @router.message(FastingStates.waiting_for_fast_period_start)
# async def process_fast_period_start(message: Message, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞ –ø–æ—Å—Ç–æ–≤"""
#     start_date = parse_date(message.text)
#     if not start_date:
#         await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì")
#         return
    
#     await state.update_data(fast_period_start=start_date)
    
#     await message.answer(
#         "üìÖ –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É (–ø–æ –∫–∞–∫—É—é –¥–∞—Ç—É —Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã) –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n"
#         "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.06.2020"
#     )
#     await state.set_state(FastingStates.waiting_for_fast_period_end)

# @router.message(FastingStates.waiting_for_fast_period_end)
# async def process_fast_period_end(message: Message, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞ –ø–æ—Å—Ç–æ–≤"""
#     end_date = parse_date(message.text)
#     if not end_date:
#         await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì")
#         return
    
#     data = await state.get_data()
#     start_date = data['fast_period_start']
    
#     if end_date <= start_date:
#         await message.answer("‚ùå –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã.")
#         return
    
#     user = await user_service.get_or_create_user(message.from_user.id)
    
#     # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç—ã –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏
#     result = fasting_calc_service.calculate_fasts_between_dates(
#         start_date=start_date,
#         end_date=end_date,
#         gender=user.gender or 'male',
#         hayd_average_days=user.hayd_average_days,
#         childbirth_data=user.get_childbirth_info()
#     )
    
#     await _show_calculation_result(message, result, state, end_date, start_date)
    
@router.message(FastingStates.waiting_for_fast_year_count)
async def process_fast_period_end(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö"""
    
    try:
        years = int(message.text.strip())
        if years < 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º\.", parse_mode="MarkdownV2")
            return
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ\.", parse_mode="MarkdownV2")
        return

    
    user = await user_service.get_or_create_user(message.from_user.id)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç—ã –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏
    result = fasting_calc_service.calculate_fasts_by_years(years=years)
    
    await _show_calculation_result(message, result, state, method='years')

@router.callback_query(FastingStates.choosing_method, F.data == "fast_calc_manual")
async def calc_fasts_manual(callback: CallbackQuery, state: FSMContext):
    """–†—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤"""
    await callback.message.edit_text(
        "‚úã *–†—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π –ø–æ—Å—Ç–∞:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 120",
        parse_mode='MarkdownV2'
    )
    await state.set_state(FastingStates.waiting_for_manual_days)

@router.message(FastingStates.waiting_for_manual_days)
async def process_manual_fast_days(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–Ω–µ–π –ø–æ—Å—Ç–∞"""
    try:
        days = int(message.text)
        if days < 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º\.", parse_mode="MarkdownV2")
            return
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ\.", parse_mode="MarkdownV2")
        return
    
    result = {
        'fasting_days': days,
        'total_days': days,
        'excluded_days': 0,
        'details': '–†—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π',
        'years': 0
    }
    
    await _show_calculation_result(message, result, state, method="manual")

async def _show_calculation_result(message: Message, result: dict, state: FSMContext, 
                                   end_date=None, start_date=None, method=None):
    """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    result_text = "‚úÖ *–†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω\!*\n\n"
    
    if method == "manual" or method == "years":
        result_text += f"üìù *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π –ø–æ—Å—Ç–∞: {result['fasting_days']}*\n\n"
    else:
        if start_date and end_date:
            result_text += f"üìÖ –ü–µ—Ä–∏–æ–¥: —Å {format_date(start_date)} –ø–æ {format_date(end_date)}\n"
        elif end_date:
            result_text += f"üìÖ –ü–µ—Ä–∏–æ–¥: –¥–æ {format_date(end_date)}\n"
        
        if result.get('years', 0) > 0:
            result_text += f"üóìÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç: {result['years']}\n"
        
        result_text += f"üìä –ë–∞–∑–æ–≤—ã—Ö –¥–Ω–µ–π –ø–æ—Å—Ç–∞: {result['total_days']}\n"
        
        if result['excluded_days'] > 0:
            result_text += f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–æ \(—Ö–∞–π–¥/–Ω–∏—Ñ–∞—Å\): {result['excluded_days']}\n"
        
        result_text += f"\nüìù *–ò—Ç–æ–≥–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π –ø–æ—Å—Ç–∞: {result['fasting_days']}*\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∂–µ–Ω—â–∏–Ω
        if result.get('details'):
            result_text += result['details'] + "\n\n"
    
    result_text += "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç\?"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(calculation_result=result['fasting_days'])
    
    await message.answer(
        result_text,
        reply_markup=get_fasting_confirmation_keyboard(),
        parse_mode="MarkdownV2"
    )
    await state.set_state(FastingStates.confirmation)

@router.callback_query(FastingStates.confirmation, F.data == "fast_confirm_save")
async def save_calculation_result(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞"""
    data = await state.get_data()
    fasting_days = data.get('calculation_result', 0)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    from ....core.database.repositories.user_repository import UserRepository
    user_repo = UserRepository()
    
    success = await user_repo.update_user(
        telegram_id=callback.from_user.id,
        fasting_missed_days=fasting_days,
        fasting_completed_days=0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø—Ä–∏ –Ω–æ–≤–æ–º —Ä–∞—Å—á–µ—Ç–µ
    )
    
    if success:
        await callback.message.edit_text(
            f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω\!\n\n"
            f"üìù –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π –ø–æ—Å—Ç–∞: *{fasting_days}*\n\n"
            "ü§≤ –ü—É—Å—Ç—å –ê–ª–ª–∞—Ö –æ–±–ª–µ–≥—á–∏—Ç —Ç–µ–±–µ –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤\!",
            parse_mode="MarkdownV2"
        )
    else:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
    
    await state.clear()

@router.callback_query(F.data.in_(["fast_confirm_cancel", "fast_calc_cancel"]))
async def cancel_calculation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ—Å—Ç–æ–≤"""
    await callback.message.edit_text("‚ùå –†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.")
    await state.clear()

@router.callback_query(F.data.startswith("fast_"))
async def handle_fasting_actions(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ—Å—Ç–∞–º–∏"""
    action = callback.data.split("_")[1]
    
    user = await user_service.get_or_create_user(callback.from_user.id)
    
    if not user.is_registered:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", show_alert=True)
        return
    
    from ....core.database.repositories.user_repository import UserRepository
    user_repo = UserRepository()
    
    if action == "completed":
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–Ω–∏
        new_completed = user.fasting_completed_days + 1
        await user_repo.update_user(
            telegram_id=callback.from_user.id,
            fasting_completed_days=new_completed
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        updated_user = await user_service.get_or_create_user(callback.from_user.id)
        await send_fasting_action_message_and_update_menu(callback, "completed", updated_user)
        
    elif action == "missed":
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–Ω–∏
        new_missed = user.fasting_missed_days + 1
        await user_repo.update_user(
            telegram_id=callback.from_user.id,
            fasting_missed_days=new_missed
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        updated_user = await user_service.get_or_create_user(callback.from_user.id)
        await send_fasting_action_message_and_update_menu(callback, "missed", updated_user)
    
    elif action == "stats":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        missed_days = user.fasting_missed_days or 0
        completed_days = user.fasting_completed_days or 0
        remaining_days = max(0, missed_days - completed_days)
        
        stats_text = (
            f"üìä *–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤:*\n\n"
            f"üìù –í—Å–µ–≥–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ: *{missed_days}*\n"
            f"‚úÖ –í–æ—Å–ø–æ–ª–Ω–µ–Ω–æ: *{completed_days}*\n"
            f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: *{remaining_days}*\n\n"
        )
        
        if missed_days > 0:
            progress = (completed_days / missed_days) * 100
            progress_bar = "‚ñì" * int(progress / 10) + "‚ñë" * (10 - int(progress / 10))
            stats_text += escape_markdown(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: [{progress_bar}] {progress:.1f}%\n\n")
            
            if progress >= 80:
                stats_text += "üéØ –í—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏\! –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ—Å—å\!"
            elif progress >= 50:
                stats_text += "üí™ –û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å\! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ\!"
            elif progress >= 25:
                stats_text += "üìà –•–æ—Ä–æ—à–µ–µ –Ω–∞—á–∞–ª–æ\! –î–µ—Ä–∂–∏—Ç–µ —Ç–µ–º–ø\!"
            else:
                stats_text += "üå± –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ—Å—Ç–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –∫ —Ü–µ–ª–∏\!"
        elif missed_days == 0:
            stats_text += "üí° –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"
        else:
            stats_text += "üéâ –í—Å–µ –ø–æ—Å—Ç—ã –≤–æ—Å–ø–æ–ª–Ω–µ–Ω—ã\! –ú–∞—à–∞–∞ –õ–ª–∞—Ö\!"
        
        # if user.gender == 'female' and user.hayd_average_days:
        #     stats_text += f"\n\nüìã *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –¥–ª—è –∂–µ–Ω—â–∏–Ω:*\n"
        #     stats_text += f"‚Ä¢ –¢–µ–∫—É—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–π–¥–∞: {user.hayd_average_days} –¥–Ω–µ–π\n"
        #     stats_text += f"‚Ä¢ –†–∞—Å—á–µ—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç –¥–Ω–∏ —Ö–∞–π–¥–∞ –∏ –Ω–∏—Ñ–∞—Å–∞\n"
        #     if user.childbirth_count > 0:
        #         stats_text += f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–¥–æ–≤: {user.childbirth_count}\n"
                
        stats_text += "\n\nü§≤ –î–∞ –ø—Ä–∏–º–µ—Ç –ê–ª–ª–∞—Ö –≤–∞—à–∏ —É—Å–∏–ª–∏—è\!"
        
        await callback.message.answer(stats_text, parse_mode="MarkdownV2")
        return
    
    elif action == "reset":
        # –°–±—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å—Ç–∞—Ö
        await user_repo.update_user(
            telegram_id=callback.from_user.id,
            fasting_missed_days=0,
            fasting_completed_days=0
        )
        await callback.answer("üîÑ –î–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–∞—Ö —Å–±—Ä–æ—à–µ–Ω—ã")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞
        updated_user = await user_service.get_or_create_user(callback.from_user.id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞
        menu_text = (
            "üìø *–ü–æ—Å—Ç—ã*\n\n"
            f"üìù –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥–Ω–µ–π: *{updated_user.fasting_missed_days or 0}*\n"
            f"‚úÖ –í–æ—Å–ø–æ–ª–Ω–µ–Ω–æ –¥–Ω–µ–π: *{updated_user.fasting_completed_days or 0}*\n"
            f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: *{max(0, (updated_user.fasting_missed_days or 0) - (updated_user.fasting_completed_days or 0))}*\n"
        )
        
        await callback.message.edit_text(
            menu_text,
            reply_markup=get_fasting_keyboard(),
            parse_mode="MarkdownV2"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π)
@router.callback_query(F.data.startswith("fast_adjust_"))
async def handle_fast_adjustment(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –ø–æ—Å—Ç–∞"""
    try:
        parts = callback.data.split("_")
        action_type = parts[2]  # "completed" –∏–ª–∏ "missed"
        amount = int(parts[3])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    user = await user_service.get_or_create_user(callback.from_user.id)
    
    if not user.is_registered:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", show_alert=True)
        return
    
    from ....core.database.repositories.user_repository import UserRepository
    user_repo = UserRepository()
    
    if action_type == "completed":
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–Ω–∏
        new_completed = user.fasting_completed_days + amount
        await user_repo.update_user(
            telegram_id=callback.from_user.id,
            fasting_completed_days=new_completed
        )
        
    elif action_type == "missed":
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–Ω–∏
        new_missed = user.fasting_missed_days + amount
        await user_repo.update_user(
            telegram_id=callback.from_user.id,
            fasting_missed_days=new_missed
        )
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    updated_user = await user_service.get_or_create_user(callback.from_user.id)
    await send_fasting_action_message_and_update_menu(callback, action_type, updated_user, amount)

@router.callback_query(F.data == "fast_done")
async def finish_fast_actions(callback: CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–∞–º–∏"""
    await show_fasting_menu(callback.message)

async def send_fasting_action_message_and_update_menu(callback_query, action_type: str, user_data, amount: int = 1):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–π—Å—Ç–≤–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –ø–æ—Å—Ç–æ–≤"""
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
    if action_type == "completed":
        if amount == 1:
            action_text = "–≤–æ—Å–ø–æ–ª–Ω–µ–Ω 1 –¥–µ–Ω—å –ø–æ—Å—Ç–∞"
            action_emoji = "‚úÖ"
        else:
            action_text = f"–≤–æ—Å–ø–æ–ª–Ω–µ–Ω–æ {amount} –¥–Ω–µ–π –ø–æ—Å—Ç–∞"
            action_emoji = "‚úÖ"
    elif action_type == "missed":
        if amount == 1:
            action_text = "–¥–æ–±–∞–≤–ª–µ–Ω 1 –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π –¥–µ–Ω—å –ø–æ—Å—Ç–∞"
            action_emoji = "‚ûï"
        else:
            action_text = f"–¥–æ–±–∞–≤–ª–µ–Ω–æ {amount} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π –ø–æ—Å—Ç–∞"
            action_emoji = "‚ûï"
    else:
        action_text = "–∏–∑–º–µ–Ω–µ–Ω"
        action_emoji = "üîÑ"
    
    missed_days = user_data.fasting_missed_days or 0
    completed_days = user_data.fasting_completed_days or 0
    remaining_days = max(0, missed_days - completed_days)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º progress bar
    if missed_days > 0:
        progress = (completed_days / missed_days) * 100
        progress_bar = "‚ñì" * int(progress / 10) + "‚ñë" * (10 - int(progress / 10))
        progress_text = escape_markdown(f"\nüìä [{progress_bar}] {progress:.1f}%")
    else:
        progress_text = ""
    
    notification_text = (
        f"{action_emoji} *–ü–æ—Å—Ç—ã:* {action_text}\n\n"
        f"üìù –í—Å–µ–≥–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ: *{missed_days}*\n"
        f"‚úÖ –í–æ—Å–ø–æ–ª–Ω–µ–Ω–æ: *{completed_days}*\n"
        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: *{remaining_days}*"
        f"{progress_text}"
    )
    
    # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if remaining_days == 0 and missed_days > 0:
        notification_text += f"\n\nüéâ *–ú–∞—à–∞–∞ –õ–ª–∞—Ö\!* –í—Å–µ –ø–æ—Å—Ç—ã –≤–æ—Å–ø–æ–ª–Ω–µ–Ω—ã\!"
    
    # 1. –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await callback_query.message.edit_text(notification_text, parse_mode="MarkdownV2")
    
    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é –ø–æ—Å—Ç–æ–≤
    menu_text = (
        "üìø *–ü–æ—Å—Ç—ã*\n\n"
        f"üìù –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥–Ω–µ–π: *{missed_days}*\n"
        f"‚úÖ –í–æ—Å–ø–æ–ª–Ω–µ–Ω–æ –¥–Ω–µ–π: *{completed_days}*\n"
        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: *{remaining_days}*\n"
    )
    
    if missed_days > 0:
        progress = (completed_days / missed_days) * 100
        progress_bar = "‚ñì" * int(progress / 10) + "‚ñë" * (10 - int(progress / 10))
        menu_text += escape_markdown(f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: [{progress_bar}] {progress:.1f}%")
    
    await callback_query.message.answer(
        menu_text,
        reply_markup=get_fasting_keyboard(),
        parse_mode="MarkdownV2"
    )