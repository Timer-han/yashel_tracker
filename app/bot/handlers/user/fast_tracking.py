from aiogram import Router, F
from aiogram.types import Message, CallbackQuery

from ...keyboards.user.fast_tracking import get_fast_tracking_keyboard, get_fast_adjustment_keyboard
from ....core.services.fast_service import FastService
from ....core.config import config

router = Router()
fast_service = FastService()

@router.message(F.text == "ü•ó –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ—Å—Ç—ã")
async def show_fast_tracking(message: Message):
    """–ü–æ–∫–∞–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤"""
    fasts = await fast_service.get_user_fasts(message.from_user.id)
    
    if not fasts:
        await message.answer(
            "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å—Ç–∞—Ö.\n"
            "–°–Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–µ–π 'ü•ó –†–∞—Å—á–µ—Ç –ø–æ—Å—Ç–æ–≤'."
        )
        return
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤–æ—Å–ø–æ–ª–Ω–∏—Ç—å
    fasts_to_show = [f for f in fasts if f.remaining > 0]
    
    if not fasts_to_show:
        await message.answer(
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ –≤–∞—à–∏ –ø–æ—Å—Ç—ã –≤–æ—Å–ø–æ–ª–Ω–µ–Ω—ã!\n"
            "–ú–∞—à–∞–∞ –õ–ª–∞—Ö! ü§≤"
        )
        return
    
    await message.answer(
        "ü•ó **–û—Ç–º–µ—Ç–∏—Ç—å –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã**",
        reply_markup=get_fast_tracking_keyboard(fasts),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("fast_inc_"))
async def increase_fast(callback: CallbackQuery):
    """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –û–°–¢–ê–í–®–ò–•–°–Ø –ø–æ—Å—Ç–æ–≤"""
    fast_type = callback.data.split("_")[2]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    fast = await fast_service.fast_repo.get_fast(callback.from_user.id, fast_type)
    
    if not fast:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    # –ï—Å–ª–∏ –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö <= 0, –¥–æ–±–∞–≤–ª—è–µ–º –∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º
    if fast.completed <= 0:
        success = await fast_service.increase_missed_fasts(
            callback.from_user.id, fast_type, 1
        )
        
        if success:
            updated_fast = await fast_service.fast_repo.get_fast(callback.from_user.id, fast_type)
            await send_fast_action_message_and_update_menu(callback, fast_type, "increase_missed", updated_fast)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)
    else:
        # –£–º–µ–Ω—å—à–∞–µ–º –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è)
        success = await fast_service.update_fast_count(
            callback.from_user.id, fast_type, -1
        )
        
        if success:
            updated_fast = await fast_service.fast_repo.get_fast(callback.from_user.id, fast_type)
            await send_fast_action_message_and_update_menu(callback, fast_type, "decrease_completed", updated_fast)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)

@router.callback_query(F.data.startswith("fast_dec_"))
async def decrease_fast(callback: CallbackQuery):
    """–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –û–°–¢–ê–í–®–ò–•–°–Ø –ø–æ—Å—Ç–æ–≤ (—É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö)"""
    fast_type = callback.data.split("_")[2]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ –≤–æ—Å–ø–æ–ª–Ω—è—Ç—å
    fast = await fast_service.fast_repo.get_fast(callback.from_user.id, fast_type)
    if not fast or fast.remaining <= 0:
        await callback.answer("‚ùå –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏—è", show_alert=True)
        return
    
    success = await fast_service.update_fast_count(
        callback.from_user.id, fast_type, 1
    )
    
    if success:
        updated_fast = await fast_service.fast_repo.get_fast(callback.from_user.id, fast_type)
        await send_fast_action_message_and_update_menu(callback, fast_type, "increase_completed", updated_fast)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)

async def send_fast_action_message_and_update_menu(callback_query, fast_type: str, action_type: str, fast_data):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–π—Å—Ç–≤–∏–∏ —Å –ø–æ—Å—Ç–∞–º–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é"""
    fast_name = config.FAST_TYPES[fast_type]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
    if action_type == "increase_completed":
        action_text = "–≤–æ—Å–ø–æ–ª–Ω–µ–Ω 1 –ø–æ—Å—Ç"
        action_emoji = "‚úÖ"
    elif action_type == "decrease_completed":
        action_text = "—É–±—Ä–∞–Ω 1 –ø–æ—Å—Ç –∏–∑ –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö"
        action_emoji = "‚ûñ"
    elif action_type == "increase_missed":
        action_text = "–¥–æ–±–∞–≤–ª–µ–Ω 1 –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π –ø–æ—Å—Ç"
        action_emoji = "‚ûï"
    else:
        action_text = "–∏–∑–º–µ–Ω–µ–Ω"
        action_emoji = "üîÑ"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º progress bar
    if fast_data.total_missed > 0:
        progress = (fast_data.completed / fast_data.total_missed) * 100
        progress_bar = "‚ñì" * int(progress / 10) + "‚ñë" * (10 - int(progress / 10))
        progress_text = f"\nüìä [{progress_bar}] {progress:.1f}%"
    else:
        progress_text = ""
    
    notification_text = (
        f"{action_emoji} **{fast_name}:** {action_text}\n\n"
        f"üìù –í—Å–µ–≥–æ: **{fast_data.total_missed}** \n "
        f"‚úÖ –í–æ—Å–ø–æ–ª–Ω–µ–Ω–æ: **{fast_data.completed}** \n "
        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: **{fast_data.remaining}**"
        f"{progress_text}"
    )
    
    # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if fast_data.remaining == 0:
        notification_text += f"\n\nüéâ **–ú–∞—à–∞–∞ –õ–ª–∞—Ö!** –í—Å–µ {fast_name} –≤–æ—Å–ø–æ–ª–Ω–µ–Ω—ã!"
    
    # 1. –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await callback_query.message.edit_text(notification_text, parse_mode="Markdown")
    
    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
    fasts = await fast_service.get_user_fasts(callback_query.from_user.id)
    
    await callback_query.message.answer(
        "ü•ó **–û—Ç–º–µ—Ç–∏—Ç—å –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã**",
        reply_markup=get_fast_tracking_keyboard(fasts),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("fast_info_"))
async def show_fast_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç–µ"""
    fast_type = callback.data.split("_")[2]
    
    fast = await fast_service.fast_repo.get_fast(callback.from_user.id, fast_type)
    
    if not fast:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    fast_name = config.FAST_TYPES[fast_type]
    info_text = (
        f"ü•ó **{fast_name}**\n\n"
        f"üìù –í—Å–µ–≥–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ: {fast.total_missed}\n"
        f"‚úÖ –í–æ—Å–ø–æ–ª–Ω–µ–Ω–æ: {fast.completed}\n"
        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {fast.remaining}\n\n"
    )
    
    if fast.total_missed > 0:
        progress = (fast.completed / fast.total_missed) * 100
        info_text += f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%"
    
    await callback.message.answer(
        info_text,
        reply_markup=get_fast_adjustment_keyboard(fast_type, fast.remaining),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "show_fast_stats")
async def show_fast_stats_from_tracking(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç–æ–≤ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    stats = await fast_service.get_user_fast_statistics(callback.from_user.id)
    
    stats_text = (
        "üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤:**\n\n"
        f"üìù –í—Å–µ–≥–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ: **{stats['total_missed']}**\n"
        f"‚úÖ –í–æ—Å–ø–æ–ª–Ω–µ–Ω–æ: **{stats['total_completed']}**\n"
        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: **{stats['total_remaining']}**\n\n"
    )
    
    if stats['total_completed'] > 0 and stats['total_missed'] > 0:
        progress = (stats['total_completed'] / stats['total_missed']) * 100
        stats_text += f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: **{progress:.1f}%**"
    
    await callback.answer()
    await callback.message.answer(stats_text, parse_mode="Markdown")

@router.callback_query(F.data.startswith("fast_adjust_"))
async def fast_adjust_fast(callback: CallbackQuery):
    """–ë—ã—Å—Ç—Ä–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤"""
    parts = callback.data.split("_")
    fast_type = parts[2]
    amount = int(parts[3])
    
    fast = await fast_service.fast_repo.get_fast(callback.from_user.id, fast_type)
    if not fast:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    success = False
    action_type = ""
    
    if amount > 0:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è (–ª–∏–±–æ —É–º–µ–Ω—å—à–∞–µ–º –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ, –ª–∏–±–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º)
        if fast.completed >= amount:
            # –£–º–µ–Ω—å—à–∞–µ–º –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
            success = await fast_service.update_fast_count(
                callback.from_user.id, fast_type, -amount
            )
            action_type = "decrease_completed"
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º
            success = await fast_service.increase_missed_fasts(
                callback.from_user.id, fast_type, amount
            )
            action_type = "increase_missed"
    else:
        # –£–º–µ–Ω—å—à–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ)
        if fast.remaining >= abs(amount):
            success = await fast_service.update_fast_count(
                callback.from_user.id, fast_type, abs(amount)
            )
            action_type = "increase_completed"
        else:
            await callback.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏—è (–¥–æ—Å—Ç—É–ø–Ω–æ: {fast.remaining})", show_alert=True)
            return
    
    if success:
        updated_fast = await fast_service.fast_repo.get_fast(callback.from_user.id, fast_type)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
        fast_name = config.FAST_TYPES[fast_type]
        
        if amount > 0:
            if action_type == "decrease_completed":
                action_text = f"—É–±—Ä–∞–Ω–æ {amount} –∏–∑ –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö"
                action_emoji = "‚ûñ"
            else:
                action_text = f"–¥–æ–±–∞–≤–ª–µ–Ω–æ {amount} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö"
                action_emoji = "‚ûï"
        else:
            action_text = f"–≤–æ—Å–ø–æ–ª–Ω–µ–Ω–æ {abs(amount)} –ø–æ—Å—Ç–æ–≤"
            action_emoji = "‚úÖ"
        
        result_text = (
            f"{action_emoji} **{fast_name}:** {action_text}\n\n"
            f"üìù –í—Å–µ–≥–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ: **{updated_fast.total_missed}**\n"
            f"‚úÖ –í–æ—Å–ø–æ–ª–Ω–µ–Ω–æ: **{updated_fast.completed}**\n"
            f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: **{updated_fast.remaining}**"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        await callback.message.edit_text(
            result_text,
            reply_markup=get_fast_adjustment_keyboard(fast_type, updated_fast.remaining),
            parse_mode="Markdown"
        )
        
        await callback.answer()
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)

@router.callback_query(F.data == "fast_adjustment_done")
async def finish_fast_adjustment(callback: CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å—Ç–∞"""
    fasts = await fast_service.get_user_fasts(callback.from_user.id)
    
    await callback.message.edit_text(
        "ü•ó **–û—Ç–º–µ—Ç–∏—Ç—å –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã**",
        reply_markup=get_fast_tracking_keyboard(fasts),
        parse_mode="Markdown"
    )