from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from ...keyboards.user.fast_tracking import (
    get_fast_tracking_keyboard,
    get_fast_adjustment_keyboard
)
from ....core.services.fast_service import FastService
from ....core.config import config

router = Router()
fast_service = FastService()

@router.message(F.text == "üìø –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ—Å—Ç—ã")
async def show_fast_tracking(message: Message):
    """–ü–æ–∫–∞–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤"""
    fasts = await fast_service.get_user_fasts(message.from_user.id)
    
    if not fasts:
        await message.answer(
            "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å—Ç–∞—Ö.\n"
            "–°–Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–µ–π 'üìø –†–∞—Å—á–µ—Ç –ø–æ—Å—Ç–æ–≤'."
        )
        return
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤–æ—Å–ø–æ–ª–Ω–∏—Ç—å
    fasts_to_show = [f for f in fasts if f.remaining > 0]
    
    if not fasts_to_show:
        await message.answer(
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ –≤–∞—à–∏ –ø–æ—Å—Ç—ã –≤–æ—Å–ø–æ–ª–Ω–µ–Ω—ã!\n"
            "–ú–∞—à–∞–∞ –õ–ª–∞—Ö! ü§≤"
        )
        return
    
    await message.answer(
        "üìø **–û—Ç–º–µ—Ç–∏—Ç—å –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏:",
        reply_markup=get_fast_tracking_keyboard(fasts_to_show),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("fast_info_"))
async def show_fast_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç–µ"""
    parts = callback.data.split("_")
    fast_type = parts[2]
    year = int(parts[3]) if len(parts) > 3 and parts[3] != "None" else None
    
    fast = await fast_service.fast_repo.get_fast(callback.from_user.id, fast_type, year)
    
    if not fast:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    if year:
        fast_name = f"–†–∞–º–∞–¥–∞–Ω {year}"
    else:
        fast_name = config.FAST_TYPES.get(fast_type, fast_type)
    
    info_text = (
        f"üìø **{fast_name}**\n\n"
        f"üìù –í—Å–µ–≥–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ: {fast.total_missed} –¥–Ω–µ–π\n"
        f"‚úÖ –í–æ—Å–ø–æ–ª–Ω–µ–Ω–æ: {fast.completed} –¥–Ω–µ–π\n"
        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {fast.remaining} –¥–Ω–µ–π\n\n"
    )
    
    if fast.total_missed > 0:
        progress = (fast.completed / fast.total_missed) * 100
        info_text += f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%"
    
    await callback.message.answer(
        info_text,
        reply_markup=get_fast_adjustment_keyboard(fast_type, year, fast.remaining),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("fast_dec_"))
async def decrease_fast(callback: CallbackQuery):
    """–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ—Å—Ç–æ–≤ (–≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–µ)"""
    parts = callback.data.split("_")
    fast_type = parts[2]
    year = int(parts[3]) if len(parts) > 3 and parts[3] != "None" else None
    
    fast = await fast_service.fast_repo.get_fast(callback.from_user.id, fast_type, year)
    if not fast or fast.remaining <= 0:
        await callback.answer("‚ùå –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏—è", show_alert=True)
        return
    
    success = await fast_service.update_fast_count(
        callback.from_user.id, fast_type, 1, year
    )
    
    if success:
        updated_fast = await fast_service.fast_repo.get_fast(
            callback.from_user.id, fast_type, year
        )
        
        if year:
            fast_name = f"–†–∞–º–∞–¥–∞–Ω {year}"
        else:
            fast_name = config.FAST_TYPES.get(fast_type, fast_type)
        
        await callback.answer(f"‚úÖ {fast_name}: –≤–æ—Å–ø–æ–ª–Ω–µ–Ω 1 –¥–µ–Ω—å")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        fasts = await fast_service.get_user_fasts(callback.from_user.id)
        fasts_to_show = [f for f in fasts if f.remaining > 0]
        
        if fasts_to_show:
            await callback.message.edit_reply_markup(
                reply_markup=get_fast_tracking_keyboard(fasts_to_show)
            )
        else:
            await callback.message.edit_text(
                "üéâ –í—Å–µ –ø–æ—Å—Ç—ã –≤–æ—Å–ø–æ–ª–Ω–µ–Ω—ã! –ú–∞—à–∞–∞ –õ–ª–∞—Ö! ü§≤"
            )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)

@router.callback_query(F.data.startswith("fast_inc_"))
async def increase_fast(callback: CallbackQuery):
    """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ—Å—Ç–æ–≤"""
    parts = callback.data.split("_")
    fast_type = parts[2]
    year = int(parts[3]) if len(parts) > 3 and parts[3] != "None" else None
    
    success = await fast_service.increase_missed_fasts(
        callback.from_user.id, fast_type, 1, year
    )
    
    if success:
        if year:
            fast_name = f"–†–∞–º–∞–¥–∞–Ω {year}"
        else:
            fast_name = config.FAST_TYPES.get(fast_type, fast_type)
        
        await callback.answer(f"‚ûï {fast_name}: –¥–æ–±–∞–≤–ª–µ–Ω 1 –¥–µ–Ω—å")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        fasts = await fast_service.get_user_fasts(callback.from_user.id)
        fasts_to_show = [f for f in fasts if f.remaining > 0]
        
        await callback.message.edit_reply_markup(
            reply_markup=get_fast_tracking_keyboard(fasts_to_show)
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)

@router.callback_query(F.data.startswith("fast_adjust_"))
async def adjust_fast_count(callback: CallbackQuery):
    """–ë—ã—Å—Ç—Ä–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤"""
    parts = callback.data.split("_")
    fast_type = parts[2]
    year_str = parts[3] if len(parts) > 3 else "None"
    amount = int(parts[4]) if len(parts) > 4 else 0
    
    year = int(year_str) if year_str != "None" else None
    
    if amount > 0:
        # –í–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
        success = await fast_service.update_fast_count(
            callback.from_user.id, fast_type, amount, year
        )
    else:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö
        success = await fast_service.increase_missed_fasts(
            callback.from_user.id, fast_type, abs(amount), year
        )
    
    if success:
        updated_fast = await fast_service.fast_repo.get_fast(
            callback.from_user.id, fast_type, year
        )
        
        if year:
            fast_name = f"–†–∞–º–∞–¥–∞–Ω {year}"
        else:
            fast_name = config.FAST_TYPES.get(fast_type, fast_type)
        
        action_text = "–≤–æ—Å–ø–æ–ª–Ω–µ–Ω–æ" if amount > 0 else "–¥–æ–±–∞–≤–ª–µ–Ω–æ"
        result_text = (
            f"{'‚úÖ' if amount > 0 else '‚ûï'} **{fast_name}:** {action_text} {abs(amount)} –¥–Ω–µ–π\n\n"
            f"üìù –í—Å–µ–≥–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ: **{updated_fast.total_missed}**\n"
            f"‚úÖ –í–æ—Å–ø–æ–ª–Ω–µ–Ω–æ: **{updated_fast.completed}**\n"
            f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: **{updated_fast.remaining}**"
        )
        
        await callback.message.edit_text(
            result_text,
            reply_markup=get_fast_adjustment_keyboard(fast_type, year, updated_fast.remaining),
            parse_mode="Markdown"
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)