from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from ...keyboards.moderator.mod_menu import (
    get_broadcast_filters_keyboard,
    get_age_filter_keyboard, 
    get_broadcast_confirmation_keyboard
)
from ....core.services.broadcast_service import BroadcastService
from ....core.config import config
from ...filters.role_filter import moderator_filter
from ...states.moderator import ModeratorStates

router = Router()
router.message.filter(moderator_filter)
router.callback_query.filter(moderator_filter)

broadcast_service = BroadcastService()

@router.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def start_broadcast(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await state.clear()
    
    await message.answer(
        "üì¢ *–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏:",
        reply_markup=get_broadcast_filters_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(ModeratorStates.broadcast_filters)

@router.callback_query(ModeratorStates.broadcast_filters, F.data.startswith("filter_"))
async def process_filter(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    filter_type = callback.data.split("_", 1)[1]
    
    current_filters = (await state.get_data()).get('filters', {})
    
    if filter_type == "gender_male":
        current_filters['gender'] = 'male'
        await callback.answer("‚úÖ –§–∏–ª—å—Ç—Ä: —Ç–æ–ª—å–∫–æ –º—É–∂—á–∏–Ω—ã")
        
    elif filter_type == "gender_female":
        current_filters['gender'] = 'female'
        await callback.answer("‚úÖ –§–∏–ª—å—Ç—Ä: —Ç–æ–ª—å–∫–æ –∂–µ–Ω—â–∏–Ω—ã")
        
    elif filter_type == "city":
        await callback.message.edit_text(
            "üìç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:"
        )
        await state.update_data(filters=current_filters, waiting_for='city')
        await state.set_state(ModeratorStates.broadcast_message)
        return
        
    elif filter_type == "age":
        await callback.message.edit_text(
            "üéÇ –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É:",
            reply_markup=get_age_filter_keyboard()
        )
        await state.update_data(filters=current_filters)
        return
        
    elif filter_type.startswith("age_"):
        age_range = filter_type.split("_", 1)[1]
        age_ranges = {
            "0_18": (0, 18),
            "18_24": (18, 24),
            "25_34": (25, 34),
            "35_44": (35, 44), 
            "45_54": (45, 54),
            "55_plus": (55, 150)
        }
        current_filters['age_range'] = age_ranges.get(age_range, (0, 150))
        await callback.answer(f"‚úÖ –§–∏–ª—å—Ç—Ä: –≤–æ–∑—Ä–∞—Å—Ç {age_range.replace('_', '-')}")
        
    elif filter_type == "all":
        current_filters = {}
        await callback.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    
    await state.update_data(filters=current_filters)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.edit_text(_get_filter_text(current_filters))

    await state.set_state(ModeratorStates.broadcast_message)

def _get_filter_text(filters: dict):
    filter_text = "üì¢ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n"
    filter_text += "*–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:*\n"
    
    if 'gender' in filters:
        gender_text = "–ú—É–∂—á–∏–Ω—ã" if filters['gender'] == 'male' else "–ñ–µ–Ω—â–∏–Ω—ã"
        filter_text += f"üë§ –ü–æ–ª: {gender_text}\n"
    
    if 'city' in filters:
        filter_text += f"üìç –ì–æ—Ä–æ–¥: {filters['city']}\n"
        
    if 'age_range' in filters:
        min_age, max_age = filters['age_range']
        age_text = f"{min_age}-{max_age}" if max_age < 150 else f"{min_age}+"
        filter_text += f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age_text}\n"
    
    if not filters:
        filter_text += "–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
    
    filter_text += "\nüìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"
    
    return filter_text

async def _show_message_input(callback: CallbackQuery, filters: dict):
    """–ü–æ–∫–∞–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    filter_text = "üì¢ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n"
    filter_text += "*–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:*\n"
    
    if 'gender' in filters:
        gender_text = "–ú—É–∂—á–∏–Ω—ã" if filters['gender'] == 'male' else "–ñ–µ–Ω—â–∏–Ω—ã"
        filter_text += f"üë§ –ü–æ–ª: {gender_text}\n"
    
    if 'city' in filters:
        filter_text += f"üìç –ì–æ—Ä–æ–¥: {filters['city']}\n"
        
    if 'age_range' in filters:
        min_age, max_age = filters['age_range']
        age_text = f"{min_age}-{max_age}" if max_age < 150 else f"{min_age}+"
        filter_text += f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age_text}\n"
    
    if not filters:
        filter_text += "–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
    
    filter_text += "\nüìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"
    
    await callback.message.edit_text(filter_text, parse_mode="Markdown")

@router.message(ModeratorStates.broadcast_message)
async def process_broadcast_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞
    if data.get('waiting_for') == 'city':
        filters = data.get('filters', {})
        filters['city'] = message.text.strip()
        await state.update_data(filters=filters, waiting_for=None)
        await message.answer(
            _get_filter_text(filters),
            parse_mode="Markdown"
        )
        # await _show_message_input(, filters)
        await state.set_state(ModeratorStates.broadcast_message)
        return
    
    await state.update_data(message_text=message.text)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    preview_text = (
        "üìã *–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n"
        "*–°–æ–æ–±—â–µ–Ω–∏–µ:*\n"
        f"{message.text}\n\n"
        "*–§–∏–ª—å—Ç—Ä—ã:* "
    )
    
    filters = data.get('filters', {})
    if not filters:
        preview_text += "–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
    else:
        filter_parts = []
        if 'gender' in filters:
            gender_text = "–º—É–∂—á–∏–Ω—ã" if filters['gender'] == 'male' else "–∂–µ–Ω—â–∏–Ω—ã"
            filter_parts.append(gender_text)
        if 'city' in filters:
            filter_parts.append(f"–≥. {filters['city']}")
        if 'age_range' in filters:
            min_age, max_age = filters['age_range']
            age_text = f"–≤–æ–∑—Ä–∞—Å—Ç {min_age}-{max_age}" if max_age < 150 else f"–≤–æ–∑—Ä–∞—Å—Ç {min_age}+"
            filter_parts.append(age_text)
        
        preview_text += ", ".join(filter_parts)
    
    preview_text += "\n\n‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?"
    
    await message.answer(
        preview_text,
        reply_markup=get_broadcast_confirmation_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(ModeratorStates.broadcast_confirmation)

@router.callback_query(ModeratorStates.broadcast_confirmation, F.data == "confirm_broadcast")
async def confirm_broadcast(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    data = await state.get_data()
    
    await callback.message.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    try:
        result = await broadcast_service.send_broadcast(
            message_text=data['message_text'],
            filters=data.get('filters', {})
        )
        
        result_text = (
            "‚úÖ *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result['sent']}\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫: {result['errors']}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {result['total_users']}"
        )
        
        await callback.message.edit_text(result_text, parse_mode="Markdown")
        
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)}"
        )
    
    await state.clear()

@router.callback_query(F.data == "cancel_broadcast")
async def cancel_broadcast(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback.message.edit_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()

@router.callback_query(F.data == "back_to_filters")
async def back_to_filters(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    await callback.message.edit_text(
        "üì¢ *–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏:",
        reply_markup=get_broadcast_filters_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(ModeratorStates.broadcast_filters)