from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from ...keyboards.admin.admin_menu import (
    get_admin_management_keyboard,
    get_role_selection_keyboard,
    get_admin_confirmation_keyboard
)
from ....core.database.repositories.admin_repository import AdminRepository
from ....core.database.repositories.user_repository import UserRepository
from ....core.database.models.admin import Admin
from ....core.config import config
from ...filters.role_filter import admin_filter
from ...states.admin import AdminStates

router = Router()
router.message.filter(admin_filter)
router.callback_query.filter(admin_filter)

admin_repo = AdminRepository()
user_repo = UserRepository()

@router.message(F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏")
async def show_admin_management(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""
    await state.clear()
    
    await message.answer(
        "üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_management_keyboard(),
        parse_mode="MarkdownV2"
    )

@router.callback_query(F.data == "add_moderator")
async def add_moderator_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
    await state.update_data(role="moderator")
    
    await callback.message.edit_text(
        "‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º:"
    )
    await state.set_state(AdminStates.add_admin_id)

@router.callback_query(F.data == "add_admin")
async def add_admin_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    await state.update_data(role="admin")
    
    await callback.message.edit_text(
        "‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï*: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç –ø–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞ –≤ —Å–∏—Å—Ç–µ–º–µ!\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:"
    )
    await state.set_state(AdminStates.add_admin_id)

@router.message(AdminStates.add_admin_id)
async def process_admin_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞"""
    try:
        user_id = int(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–æ–º
        existing_admin = await admin_repo.get_admin(user_id)
        if existing_admin:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è {existing_admin.role}")
            return
        
        data = await state.get_data()
        role = data['role']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await state.update_data(user_id=user_id)
        
        role_text = "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º" if role == "moderator" else "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        
        await message.answer(
            f"üë§ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è*\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: `{user_id}`\n"
            f"–†–æ–ª—å: *{role_text.capitalize()}*\n\n"
            f"‚ùì –ù–∞–∑–Ω–∞—á–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {role_text}?",
            reply_markup=get_admin_confirmation_keyboard(),
            parse_mode="MarkdownV2"
        )
        await state.set_state(AdminStates.confirmation)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID.")

@router.callback_query(AdminStates.confirmation, F.data == "confirm_admin_action")
async def confirm_add_admin(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞"""
    data = await state.get_data()
    user_id = data['user_id']
    role = data['role']
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
    new_admin = Admin(
        telegram_id=user_id,
        role=role,
        added_by=callback.from_user.id
    )
    
    success = await admin_repo.add_admin(new_admin)
    
    if success:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await user_repo.update_user(user_id, role=role)
        
        role_text = "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º" if role == "moderator" else "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        await callback.message.edit_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω {role_text}!"
        )
    else:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    
    await state.clear()

@router.callback_query(F.data == "list_admins")
async def list_admins(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    admins = await admin_repo.get_all_admins()
    
    if not admins:
        await callback.message.edit_text("üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.")
        return
    
    admins_text = "üìã *–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:*\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–æ–ª—è–º
    admin_list = [a for a in admins if a.role == "admin"]
    moderator_list = [a for a in admins if a.role == "moderator"]
    
    if admin_list:
        admins_text += "üëë *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:*\n"
        for admin in admin_list:
            admins_text += f"‚Ä¢ ID: `{admin.telegram_id}`\n"
        admins_text += "\n"
    
    if moderator_list:
        admins_text += "üëÆ *–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã:*\n"
        for moderator in moderator_list:
            admins_text += f"‚Ä¢ ID: `{moderator.telegram_id}`\n"
    
    await callback.message.edit_text(admins_text, parse_mode="MarkdownV2")

@router.callback_query(F.data == "remove_admin")
async def remove_admin_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞"""
    await callback.message.edit_text(
        "‚ûñ *–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ª–∏—à–∏—Ç—å –ø—Ä–∞–≤:"
    )
    await state.set_state(AdminStates.remove_admin_id)

@router.message(AdminStates.remove_admin_id)
async def process_remove_admin_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞"""
    try:
        user_id = int(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω–æ–º
        admin = await admin_repo.get_admin(user_id)
        if not admin:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
            return
        
        # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
        if user_id == message.from_user.id:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –ª–∏—à–∏—Ç—å –ø—Ä–∞–≤ —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await state.update_data(user_id=user_id, current_role=admin.role)
        
        role_text = "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" if admin.role == "admin" else "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"
        
        await message.answer(
            f"‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è*\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: `{user_id}`\n"
            f"–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: *{role_text.capitalize()}*\n\n"
            f"‚ùì –õ–∏—à–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∞–≤ {role_text}?",
            reply_markup=get_admin_confirmation_keyboard(),
            parse_mode="MarkdownV2"
        )
        await state.set_state(AdminStates.confirmation)
        
    except ValueError:  
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID.")

@router.callback_query(AdminStates.confirmation, F.data == "confirm_admin_action")
async def confirm_remove_admin(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞"""
    data = await state.get_data()
    
    if 'current_role' in data:  # –≠—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ
        user_id = data['user_id']
        
        success = await admin_repo.remove_admin(user_id)
        
        if success:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—É—é —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await user_repo.update_user(user_id, role="user")
            
            role_text = "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" if data['current_role'] == "admin" else "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"
            await callback.message.edit_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ª–∏—à–µ–Ω –ø—Ä–∞–≤ {role_text}."
            )
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤.")
    
    await state.clear()

@router.callback_query(F.data == "cancel_admin_action")
async def cancel_admin_action(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å –∞–¥–º–∏–Ω–∞–º–∏"""
    await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()

@router.callback_query(F.data == "back_to_menu")
async def back_to_admin_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏"""
    await callback.message.edit_text(
        "üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_management_keyboard(),
        parse_mode="MarkdownV2"
    )
